/**
 * This file is automatically generated. Do not make changes directly.
 *
 * By default this will regenerate when the server is started
 * and NODE_ENV !== "production".
 *
 * Mostly for internal use by GQLiteral unless otherwise
 * documented / subject to change.
 *
 * If you want more configurable types to use elsewhere, look into one of:
 *
 * https://github.com/dotansimha/graphql-code-generator
 * https://github.com/prisma/graphqlgen
 * https://github.com/apollographql/apollo-tooling
 */

// Maybe Promise
type MP<T> = T | PromiseLike<T>;

// Maybe Promise List
type MPL<T> = MP<T>[];

// Maybe Thunk
type MT<T> = T | (() => T);

// Maybe Thunk, with args
type MTA<T, A> = T | ((args?: A) => T);

export type QueryCurrentUserReturnType = MP<UserReturnType>;

export type QueryEntryReturnType = MP<null | EntryReturnType>;

export interface QueryEntryArgs {
  repoFullName: string;
}

export type QueryFeedReturnType = MP<MPL<MP<EntryReturnType>>>;

export interface QueryFeedArgs {
  limit?: number;
  offset?: number;
  type: FeedType;
}

export interface QueryRootType {
  currentUser: any;
  entry?: null | any;
}

export type QueryReturnType = {
  currentUser: MT<any>;
  entry?: MTA<null | any, QueryEntryArgs>;
};

export type UserAvatarUrlReturnType = MP<string>;

export type UserHtmlUrlReturnType = MP<string>;

export type UserLoginReturnType = MP<string>;

export interface UserRootType {
  avatar_url: string;
  html_url: string;
  login: string;
}

export type UserReturnType = {
  avatar_url: MT<string>;
  html_url: MT<string>;
  login: MT<string>;
};

export type EntryCommentCountReturnType = MP<number>;

export type EntryCommentsReturnType = MP<MPL<MP<CommentReturnType>>>;

export interface EntryCommentsArgs {
  limit?: number;
  offset?: number;
}

export type EntryCreatedAtReturnType = MP<number>;

export type EntryHotScoreReturnType = MP<number>;

export type EntryIdReturnType = MP<number>;

export type EntryPostedByReturnType = MP<null | UserReturnType>;

export type EntryRepositoryReturnType = MP<RepositoryReturnType>;

export type EntryScoreReturnType = MP<number>;

export type EntryVoteReturnType = MP<VoteReturnType>;

export interface EntryRootType {
  commentCount: number;
  comments: any[];
  createdAt: number;
  hot_score: number;
  id: number;
  postedBy?: null | any;
  repository: any;
  score: number;
  vote: any;
}

export type EntryReturnType = {
  commentCount: MT<number>;
  comments: MTA<any[], EntryCommentsArgs>;
  createdAt: MT<number>;
  hot_score: MT<number>;
  id: MT<number>;
  postedBy?: MT<null | any>;
  repository: MT<any>;
  score: MT<number>;
  vote: MT<any>;
};

export type CommentContentReturnType = MP<string>;

export type CommentCreatedAtReturnType = MP<number>;

export type CommentIdReturnType = MP<number>;

export type CommentPostedByReturnType = MP<null | UserReturnType>;

export type CommentRepoNameReturnType = MP<string>;

export interface CommentRootType {
  content: string;
  created_at: number;
  id: number;
  postedBy?: null | any;
  repoName: string;
}

export type CommentReturnType = {
  content: MT<string>;
  created_at: MT<number>;
  id: MT<number>;
  postedBy?: MT<null | any>;
  repoName: MT<string>;
};

export type RepositoryDescriptionReturnType = MP<null | string>;

export type RepositoryFullNameReturnType = MP<string>;

export type RepositoryHtmlUrlReturnType = MP<string>;

export type RepositoryNameReturnType = MP<string>;

export type RepositoryOpenIssuesCountReturnType = MP<null | number>;

export type RepositoryOwnerReturnType = MP<null | UserReturnType>;

export type RepositoryStargazersCountReturnType = MP<number>;

export interface RepositoryRootType {
  description?: null | string;
  full_name: string;
  html_url: string;
  name: string;
  open_issues_count?: null | number;
  owner?: null | any;
  stargazers_count: number;
}

export type RepositoryReturnType = {
  description?: MT<null | string>;
  full_name: MT<string>;
  html_url: MT<string>;
  name: MT<string>;
  open_issues_count?: MT<null | number>;
  owner?: MT<null | any>;
  stargazers_count: MT<number>;
};

export type VoteVoteValueReturnType = MP<number>;

export interface VoteRootType {
  vote_value: number;
}

export type VoteReturnType = {
  vote_value: MT<number>;
};

export type FeedType = "HOT" | "NEW" | "TOP";

export type MutationSubmitCommentReturnType = MP<CommentReturnType>;

export interface MutationSubmitCommentArgs {
  commentContent: string;
  repoFullName: string;
}

export type MutationSubmitRepositoryReturnType = MP<EntryReturnType>;

export interface MutationSubmitRepositoryArgs {
  repoFullName: string;
}

export type MutationVoteReturnType = MP<EntryReturnType>;

export interface MutationVoteArgs {
  repoFullName: string;
  type: VoteType;
}

export interface MutationRootType {
  submitComment: any;
  submitRepository: any;
  vote: any;
}

export type MutationReturnType = {
  submitComment: MTA<any, MutationSubmitCommentArgs>;
  submitRepository: MTA<any, MutationSubmitRepositoryArgs>;
  vote: MTA<any, MutationVoteArgs>;
};

export type VoteType = "CANCEL" | "DOWN" | "UP";

export type CacheControlScope = "PRIVATE" | "PUBLIC";

export interface GQLiteralGenArgTypes {
  Query: {
    entry: QueryEntryArgs;
    feed: QueryFeedArgs;
  };
  Entry: {
    comments: EntryCommentsArgs;
  };
  Mutation: {
    submitComment: MutationSubmitCommentArgs;
    submitRepository: MutationSubmitRepositoryArgs;
    vote: MutationVoteArgs;
  };
}

export interface GQLiteralGenRootTypes {
  Query: QueryRootType;
  User: UserRootType;
  Entry: EntryRootType;
  Comment: CommentRootType;
  Repository: RepositoryRootType;
  Vote: VoteRootType;
  Mutation: MutationRootType;
}

export interface GQLiteralGenReturnTypes {
  Query: {
    currentUser: QueryCurrentUserReturnType;
    entry: QueryEntryReturnType;
    feed: QueryFeedReturnType;
  };
  User: {
    avatar_url: UserAvatarUrlReturnType;
    html_url: UserHtmlUrlReturnType;
    login: UserLoginReturnType;
  };
  Entry: {
    commentCount: EntryCommentCountReturnType;
    comments: EntryCommentsReturnType;
    createdAt: EntryCreatedAtReturnType;
    hotScore: EntryHotScoreReturnType;
    id: EntryIdReturnType;
    postedBy: EntryPostedByReturnType;
    repository: EntryRepositoryReturnType;
    score: EntryScoreReturnType;
    vote: EntryVoteReturnType;
  };
  Comment: {
    content: CommentContentReturnType;
    createdAt: CommentCreatedAtReturnType;
    id: CommentIdReturnType;
    postedBy: CommentPostedByReturnType;
    repoName: CommentRepoNameReturnType;
  };
  Repository: {
    description: RepositoryDescriptionReturnType;
    full_name: RepositoryFullNameReturnType;
    html_url: RepositoryHtmlUrlReturnType;
    name: RepositoryNameReturnType;
    open_issues_count: RepositoryOpenIssuesCountReturnType;
    owner: RepositoryOwnerReturnType;
    stargazers_count: RepositoryStargazersCountReturnType;
  };
  Vote: {
    vote_value: VoteVoteValueReturnType;
  };
  Mutation: {
    submitComment: MutationSubmitCommentReturnType;
    submitRepository: MutationSubmitRepositoryReturnType;
    vote: MutationVoteReturnType;
  };
}

export interface GQLiteralGenTypes {
  argTypes: GQLiteralGenArgTypes;
  rootTypes: GQLiteralGenRootTypes;
  returnTypes: GQLiteralGenReturnTypes;
  context: any;
  enums: {
    FeedType: FeedType;
    VoteType: VoteType;
    CacheControlScope: CacheControlScope;
  };
  objects: {
    Query: QueryRootType;
    User: UserRootType;
    Entry: EntryRootType;
    Comment: CommentRootType;
    Repository: RepositoryRootType;
    Vote: VoteRootType;
    Mutation: MutationRootType;
  };
  interfaces: {};
  unions: {};
  scalars: {
    String: any;
    Int: any;
    Float: any;
    Boolean: any;
  };
  inputObjects: {};
  allInputTypes:
    | Extract<keyof GQLiteralGenTypes["inputObjects"], string>
    | Extract<keyof GQLiteralGenTypes["enums"], string>
    | Extract<keyof GQLiteralGenTypes["scalars"], string>;
  allOutputTypes:
    | Extract<keyof GQLiteralGenTypes["objects"], string>
    | Extract<keyof GQLiteralGenTypes["enums"], string>
    | Extract<keyof GQLiteralGenTypes["unions"], string>
    | Extract<keyof GQLiteralGenTypes["interfaces"], string>
    | Extract<keyof GQLiteralGenTypes["scalars"], string>;
}

export type Gen = GQLiteralGenTypes;

declare global {
  interface GQLiteralGen extends GQLiteralGenTypes {}
}
