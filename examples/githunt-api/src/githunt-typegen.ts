/**
 * This file was automatically generated by Nexus 0.7.0-alpha.2
 * Do not make changes to this file directly
 */


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  FeedType: {"name":"HOT","description":"Sort by a combination of freshness and score, using Reddit's algorithm"} | {"name":"NEW","description":"Newest entries first"} | {"name":"TOP","description":"Highest score entries first"}
  VoteType: "CANCEL" | "DOWN" | "UP"
}

export interface NexusGenRootTypes {
  Boolean: boolean;
  Comment: { // root type
    content?: string | null; // String
    id?: number | null; // Int
    postedBy?: NexusGenRootTypes['User'] | null; // User
    repoName?: string | null; // String
  }
  Entry: { // root type
    commentCount?: number | null; // Int
    comments?: NexusGenRootTypes['Comment'][] | null; // [Comment!]
    createdAt?: number | null; // Float
    id?: number | null; // Int
    postedBy?: NexusGenRootTypes['User'] | null; // User
    repository?: NexusGenRootTypes['Repository'] | null; // Repository
    score?: number | null; // Int
    vote?: NexusGenRootTypes['Vote'] | null; // Vote
  }
  Float: number;
  ID: string;
  Int: number;
  Mutation: { // root type
    submitComment?: NexusGenRootTypes['Comment'] | null; // Comment
    submitRepository?: NexusGenRootTypes['Entry'] | null; // Entry
    vote?: NexusGenRootTypes['Entry'] | null; // Entry
  }
  Query: { // root type
    currentUser?: NexusGenRootTypes['User'] | null; // User
    entry?: NexusGenRootTypes['Entry'] | null; // Entry
  }
  Repository: { // root type
    description?: string | null; // String
    full_name?: string | null; // String
    html_url?: string | null; // String
    name?: string | null; // String
    open_issues_count?: number | null; // Int
    owner?: NexusGenRootTypes['User'] | null; // User
    stargazers_count?: number | null; // Int
  }
  String: string;
  User: { // root type
    avatar_url?: string | null; // String
    html_url?: string | null; // String
    login?: string | null; // String
  }
  Vote: { // root type
    vote_value?: number | null; // Int
  }
}

export interface NexusGenFieldTypes {
  Comment: { // field return type
    content: string | null; // String
    createdAt: number | null; // Float
    id: number | null; // Int
    postedBy: NexusGenRootTypes['User'] | null; // User
    repoName: string | null; // String
  }
  Entry: { // field return type
    commentCount: number | null; // Int
    comments: NexusGenRootTypes['Comment'][] | null; // [Comment!]
    createdAt: number | null; // Float
    hotScore: number | null; // Float
    id: number | null; // Int
    postedBy: NexusGenRootTypes['User'] | null; // User
    repository: NexusGenRootTypes['Repository'] | null; // Repository
    score: number | null; // Int
    vote: NexusGenRootTypes['Vote'] | null; // Vote
  }
  Mutation: { // field return type
    submitComment: NexusGenRootTypes['Comment'] | null; // Comment
    submitRepository: NexusGenRootTypes['Entry'] | null; // Entry
    vote: NexusGenRootTypes['Entry'] | null; // Entry
  }
  Query: { // field return type
    currentUser: NexusGenRootTypes['User'] | null; // User
    entry: NexusGenRootTypes['Entry'] | null; // Entry
    feed: NexusGenRootTypes['Entry'][] | null; // [Entry!]
  }
  Repository: { // field return type
    description: string | null; // String
    full_name: string | null; // String
    html_url: string | null; // String
    name: string | null; // String
    open_issues_count: number | null; // Int
    owner: NexusGenRootTypes['User'] | null; // User
    stargazers_count: number | null; // Int
  }
  User: { // field return type
    avatar_url: string | null; // String
    html_url: string | null; // String
    login: string | null; // String
  }
  Vote: { // field return type
    vote_value: number | null; // Int
  }
}

export interface NexusGenArgTypes {
  Entry: {
    comments: { // args
      limit?: number | null; // Int
      offset?: number | null; // Int
    }
  }
  Mutation: {
    submitComment: { // args
      commentContent: string; // String!
      repoFullName: string; // String!
    }
    submitRepository: { // args
      repoFullName: string; // String!
    }
    vote: { // args
      repoFullName: string; // String!
      type: NexusGenEnums['VoteType']; // VoteType!
    }
  }
  Query: {
    entry: { // args
      repoFullName: string; // String!
    }
    feed: { // args
      limit?: number | null; // Int
      offset?: number | null; // Int
      type: NexusGenEnums['FeedType']; // FeedType!
    }
  }
}

export interface NexusGenAbstractResolveSourceTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export type NexusGenObjectNames = "Comment" | "Entry" | "Mutation" | "Query" | "Repository" | "User" | "Vote";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "FeedType" | "VoteType";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['enumNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveRoot: NexusGenAbstractResolveSourceTypes;
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

export type Gen = NexusGenTypes;