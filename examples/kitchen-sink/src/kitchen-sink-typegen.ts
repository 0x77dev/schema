/**
 * This file was automatically generated by Nexus 0.7.0-alpha.2
 * Do not make changes to this file directly
 */


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Bar: NexusGenRootTypes['Foo'] | NexusGenRootTypes['TestObj'];
  Baz: any;
  Boolean: boolean;
  Float: number;
  Foo: { // root type
    name?: string | null; // String
    ok?: boolean | null; // Boolean
  }
  ID: string;
  Int: number;
  Query: {};
  String: string;
  TestObj: { // root type
    item?: string | null; // String
    ok?: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypes {
  Bar: { // field return type
    ok: boolean | null; // Boolean
  }
  Baz: { // field return type
    a: NexusGenRootTypes['Bar'] | null; // Bar
    ok: boolean | null; // Boolean
  }
  Foo: { // field return type
    name: string | null; // String
    ok: boolean | null; // Boolean
  }
  Query: { // field return type
    bar: NexusGenRootTypes['Bar'] | null; // Bar
  }
  TestObj: { // field return type
    item: string | null; // String
    ok: boolean | null; // Boolean
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveSourceTypes {
  Bar: NexusGenRootTypes['Foo'] | NexusGenRootTypes['TestObj']
}

export interface NexusGenAbstractResolveReturnTypes {
  Bar: "Foo" | "TestObj"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Foo" | "Query" | "TestObj";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = "Bar" | "Baz";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['enumNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveRoot: NexusGenAbstractResolveSourceTypes;
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

export type Gen = NexusGenTypes;