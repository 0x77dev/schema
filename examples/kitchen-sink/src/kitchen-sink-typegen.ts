/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 * 
 * For better typings, you should provide configuration for how to lookup 
 * the types. See the documentation for "typegenAutoConfig"
 */
import { GraphQLResolveInfo } from "graphql";

declare global {
  interface GraphQLNexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputType: { // input type
    answer?: number | null; // Int
    key: string; // String!
  }
}

interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Bar: { // root types
    ok: boolean; // Boolean!
  }
  Baz: { // root types
    ok: boolean; // Boolean!
  }
  Foo: { // root types
    ok: boolean; // Boolean!
  }
  Query: {};
}

export interface NexusGenReturnTypes {
  Bar: { // return type
    ok: boolean; // Boolean!
  }
  Baz: { // return type
    ok: boolean; // Boolean!
  }
  Foo: { // return type
    ok: boolean; // Boolean!
  }
  Query: { // return type
    bar: undefined | null; // Bar!
  }
}

export interface NexusGenArgTypes {
}

interface NexusGenAbstractResolveSourceTypes {
  Bar: NexusGenRootTypes['Foo']
  Baz: NexusGenRootTypes['Foo']
}

interface NexusGenAbstractResolveReturnTypes {
  Bar: "Foo"
  Baz: "Foo"
}

export type NexusGenObjectNames = "Foo" | "Query";

export type NexusGenInputNames = "InputType";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = "Bar" | "Baz";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: unknown;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  returnTypes: NexusGenReturnTypes;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['enumNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveRoot: NexusGenAbstractResolveSourceTypes;
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

export type Gen = NexusGenTypes;

type MaybePromise<T> = PromiseLike<T> | T;
type SourceType<TypeName> = TypeName extends keyof NexusGenAbstractResolveSourceTypes ? NexusGenAbstractResolveSourceTypes[TypeName] : never;
type RootType<TypeName> = TypeName extends keyof NexusGenRootTypes ? NexusGenRootTypes[TypeName] : never;
type ArgType<TypeName, FieldName> = TypeName extends keyof NexusGenArgTypes ? FieldName extends keyof NexusGenArgTypes[TypeName] ? NexusGenArgTypes[TypeName][FieldName] : {} : {};

export type NexusResolver<TypeName extends keyof NexusGenReturnTypes, FieldName extends keyof NexusGenReturnTypes[TypeName]> = (
  root: RootType<TypeName>, 
  args: ArgType<TypeName, FieldName>, 
  context: NexusGenTypes['context'], 
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenReturnTypes[TypeName][FieldName]>

export type NexusAbstractTypeResolver<TypeName extends keyof NexusGenAbstractResolveReturnTypes> = (
  root: SourceType<TypeName>, 
  context: NexusGenTypes['context'], 
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenAbstractResolveReturnTypes[TypeName]>
