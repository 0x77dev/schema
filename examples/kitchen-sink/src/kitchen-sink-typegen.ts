/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import { UnusedInterfaceTypeDef } from "./kitchen-sink-definitions";
import { core, ConnectionFieldConfig } from "nexus";
import {
  ConnectionNodesResolver,
  EdgeFieldResolver,
  PageInfoFieldResolver,
} from "nexus/dist/plugins/connectionPlugin";
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin";
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<"inputTypes", TypeName, FieldName>
      >
    ): void; // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "Date";
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: ConnectionFieldConfig & {
        edges: ConnectionNodesResolver<TypeName, FieldName>;
        pageInfo: core.SubFieldResolver<TypeName, FieldName, "pageInfo">;
        edgeFields: {
          totalCount: EdgeFieldResolver<TypeName, FieldName, "totalCount">;
        };
      }
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputType: {
    // input type
    answer?: number | null; // Int
    key: string; // String!
    nestedInput?: NexusGenInputs["InputType2"] | null; // InputType2
  };
  InputType2: {
    // input type
    answer?: number | null; // Int
    key: string; // String!
    someDate: any; // Date!
  };
  NestedType: {
    // input type
    veryNested?: string | null; // String
  };
  SomeArg: {
    // input type
    arg?: NexusGenInputs["NestedType"] | null; // NestedType
    someField?: string | null; // String
  };
}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  BarConnection: {
    // root type
    edges: NexusGenRootTypes["BarEdge"]; // BarEdge!
    pageInfo: NexusGenRootTypes["PageInfo"]; // PageInfo!
  };
  BarEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes["Bar"]; // Bar!
    totalCount?: number | null; // Int
  };
  Foo: {
    // root type
    name: string; // String!
    ok: boolean; // Boolean!
  };
  Mutation: {};
  PageInfo: {
    // root type
    endCursor: string; // String!
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string; // String!
  };
  Query: {};
  SomeItem: {
    // root type
    id: string; // ID!
  };
  TestObj: {
    // root type
    a?: NexusGenRootTypes["Bar"] | null; // Bar
    item: string; // String!
    ok: boolean; // Boolean!
  };
  Bar: NexusGenRootTypes["TestObj"] | NexusGenRootTypes["Foo"];
  Baz: NexusGenRootTypes["TestObj"];
  UnusedInterface: UnusedInterfaceTypeDef;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: Date;
  TestUnion: NexusGenRootTypes["Foo"];
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  InputType: NexusGenInputs["InputType"];
  InputType2: NexusGenInputs["InputType2"];
  NestedType: NexusGenInputs["NestedType"];
  SomeArg: NexusGenInputs["SomeArg"];
}

export interface NexusGenFieldTypes {
  BarConnection: {
    // field return type
    edges: NexusGenRootTypes["BarEdge"]; // BarEdge!
    pageInfo: NexusGenRootTypes["PageInfo"]; // PageInfo!
  };
  BarEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes["Bar"]; // Bar!
    totalCount: number | null; // Int
  };
  Foo: {
    // field return type
    argsTest: boolean; // Boolean!
    name: string; // String!
    ok: boolean; // Boolean!
  };
  Mutation: {
    // field return type
    ok: boolean; // Boolean!
    someMutationField: NexusGenRootTypes["Foo"]; // Foo!
  };
  PageInfo: {
    // field return type
    endCursor: string; // String!
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string; // String!
  };
  Query: {
    // field return type
    asArgExample: string; // String!
    bar: NexusGenRootTypes["TestObj"]; // TestObj!
    connectionField: NexusGenRootTypes["BarConnection"]; // BarConnection!
    dateAsList: any[]; // [Date!]!
    extended: NexusGenRootTypes["SomeItem"]; // SomeItem!
    getNumberOrNull: number | null; // Int
    inlineArgs: string; // String!
    inputAsArgExample: string; // String!
    protectedField: number; // Int!
  };
  SomeItem: {
    // field return type
    id: string; // ID!
  };
  TestObj: {
    // field return type
    a: NexusGenRootTypes["Bar"] | null; // Bar
    argsTest: boolean; // Boolean!
    item: string; // String!
    ok: boolean; // Boolean!
  };
  Bar: {
    // field return type
    argsTest: boolean; // Boolean!
    ok: boolean; // Boolean!
  };
  Baz: {
    // field return type
    a: NexusGenRootTypes["Bar"] | null; // Bar
    ok: boolean; // Boolean!
  };
  UnusedInterface: {
    // field return type
    ok: boolean; // Boolean!
  };
}

export interface NexusGenArgTypes {
  Foo: {
    argsTest: {
      // args
      a?: NexusGenInputs["InputType"] | null; // InputType
    };
  };
  Mutation: {
    someMutationField: {
      // args
      id: string; // ID!
    };
  };
  Query: {
    asArgExample: {
      // args
      testAsArg: NexusGenInputs["InputType"]; // InputType!
    };
    connectionField: {
      // args
      a: number; // Int!
    };
    getNumberOrNull: {
      // args
      a: number; // Int!
    };
    inlineArgs: {
      // args
      someArg?: NexusGenInputs["SomeArg"] | null; // SomeArg
    };
    inputAsArgExample: {
      // args
      testInput?: NexusGenInputs["InputType"] | null; // InputType
      testScalar?: string | null; // String
    };
  };
  TestObj: {
    argsTest: {
      // args
      a?: NexusGenInputs["InputType"] | null; // InputType
    };
  };
  Bar: {
    argsTest: {
      // args
      a?: NexusGenInputs["InputType"] | null; // InputType
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {
  TestUnion: "Foo";
  Bar: "TestObj" | "Foo";
  Baz: "TestObj";
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | "BarConnection"
  | "BarEdge"
  | "Foo"
  | "Mutation"
  | "PageInfo"
  | "Query"
  | "SomeItem"
  | "TestObj";

export type NexusGenInputNames =
  | "InputType"
  | "InputType2"
  | "NestedType"
  | "SomeArg";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = "Bar" | "Baz" | "UnusedInterface";

export type NexusGenScalarNames =
  | "Boolean"
  | "Date"
  | "Float"
  | "ID"
  | "Int"
  | "String";

export type NexusGenUnionNames = "TestUnion";

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>;
    /**
     * The nullability guard can be helpful, but is also a pottentially expensive operation for lists.
     * We need to iterate the entire list to check for null items to guard against. Set this to true
     * to skip the null guard on a specific field if you know there's no potential for unsafe types.
     */
    skipNullGuard?: boolean;
  }
  interface NexusGenPluginSchemaConfig {}
}
