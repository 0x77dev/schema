/**
 * This file is automatically generated. Do not make changes directly.
 *
 * By default this will regenerate when the server is started
 * and NODE_ENV !== "production".
 *
 * Mostly for internal use by GraphQLiteral unless otherwise
 * documented / subject to change.
 *
 * If you want more configurable types to use elsewhere, look into one of:
 *
 * https://github.com/dotansimha/graphql-code-generator
 * https://github.com/prisma/graphqlgen
 * https://github.com/apollographql/apollo-tooling
 */
import * as swapi from "./types/backingTypes";

// Maybe Promise
type MP<T> = T | PromiseLike<T>;

// Maybe Promise List
type MPL<T> = MP<T>[];

// Maybe Thunk
type MT<T> = T | (() => T);

// Maybe Thunk, with args
type MTA<T, A> = T | ((args?: A) => T);

export type QueryDroidReturnType = MP<DroidReturnType>;

export interface QueryDroidArgs {
  id: string;
}

export type QueryHeroReturnType = MP<CharacterReturnType>;

export interface QueryHeroArgs {
  episode?: Episode;
}

export type QueryHumanReturnType = MP<HumanReturnType>;

export interface QueryHumanArgs {
  id: string;
}

export type QueryRootType = {};

export type QueryReturnType = {};

export type DroidAppearsInReturnType = MP<MPL<MP<Episode>>>;

export interface DroidAppearsInArgs extends CharacterAppearsInArgs {}

export type DroidFriendsReturnType = MP<MPL<MP<CharacterReturnType>>>;

export type DroidIdReturnType = MP<string>;

export type DroidNameReturnType = MP<string>;

export type DroidPrimaryFunctionReturnType = MP<string>;

export type DroidRootType = swapi.Droid;

export type DroidReturnType = swapi.Droid;

export type CharacterAppearsInReturnType = MP<MPL<MP<Episode>>>;

export interface CharacterAppearsInArgs {
  id: string;
}

export type CharacterFriendsReturnType = MP<MPL<MP<CharacterReturnType>>>;

export type CharacterIdReturnType = MP<string>;

export type CharacterNameReturnType = MP<string>;

export type Episode = 5 | 6 | 4;

export type HumanAppearsInReturnType = MP<MPL<MP<Episode>>>;

export interface HumanAppearsInArgs extends CharacterAppearsInArgs {}

export type HumanFriendsReturnType = MP<MPL<MP<CharacterReturnType>>>;

export type HumanHomePlanetReturnType = MP<null | string>;

export type HumanIdReturnType = MP<string>;

export type HumanNameReturnType = MP<string>;

export type HumanRootType = swapi.Human;

export type HumanReturnType = swapi.Human;

export type MoreEpisodes = 5 | 6 | 4 | "OTHER";

export type CharacterRootType = DroidRootType | HumanRootType;

export type CharacterReturnType = DroidReturnType | HumanReturnType;

export interface GraphQLiteralGenArgTypes {
  Query: {
    droid: QueryDroidArgs;
    hero: QueryHeroArgs;
    human: QueryHumanArgs;
  };
  Droid: {
    appearsIn: DroidAppearsInArgs;
  };
  Character: {
    appearsIn: CharacterAppearsInArgs;
  };
  Human: {
    appearsIn: HumanAppearsInArgs;
  };
}

export interface GraphQLiteralGenRootTypes {
  Character: CharacterRootType;
  Query: QueryRootType;
  Droid: DroidRootType;
  Human: HumanRootType;
}

export interface GraphQLiteralGenReturnTypes {
  Query: {
    droid: QueryDroidReturnType;
    hero: QueryHeroReturnType;
    human: QueryHumanReturnType;
  };
  Droid: {
    appearsIn: DroidAppearsInReturnType;
    friends: DroidFriendsReturnType;
    id: DroidIdReturnType;
    name: DroidNameReturnType;
    primaryFunction: DroidPrimaryFunctionReturnType;
  };
  Character: {
    appearsIn: CharacterAppearsInReturnType;
    friends: CharacterFriendsReturnType;
    id: CharacterIdReturnType;
    name: CharacterNameReturnType;
  };
  Human: {
    appearsIn: HumanAppearsInReturnType;
    friends: HumanFriendsReturnType;
    homePlanet: HumanHomePlanetReturnType;
    id: HumanIdReturnType;
    name: HumanNameReturnType;
  };
}

export interface GraphQLiteralGenTypes {
  argTypes: GraphQLiteralGenArgTypes;
  rootTypes: GraphQLiteralGenRootTypes;
  returnTypes: GraphQLiteralGenReturnTypes;
  context: unknown;
  enums: {
    Episode: Episode;
    MoreEpisodes: MoreEpisodes;
  };
  objects: {
    Query: QueryRootType;
    Droid: DroidRootType;
    Human: HumanRootType;
  };
  interfaces: {
    Character: "Droid" | "Human";
  };
  unions: {};
  scalars: {
    String: any;
    ID: any;
    Boolean: any;
  };
  inputObjects: {};
  allInputTypes:
    | Extract<keyof GraphQLiteralGenTypes["inputObjects"], string>
    | Extract<keyof GraphQLiteralGenTypes["enums"], string>
    | Extract<keyof GraphQLiteralGenTypes["scalars"], string>;
  allOutputTypes:
    | Extract<keyof GraphQLiteralGenTypes["objects"], string>
    | Extract<keyof GraphQLiteralGenTypes["enums"], string>
    | Extract<keyof GraphQLiteralGenTypes["unions"], string>
    | Extract<keyof GraphQLiteralGenTypes["interfaces"], string>
    | Extract<keyof GraphQLiteralGenTypes["scalars"], string>;
}

export type Gen = GraphQLiteralGenTypes;

declare global {
  interface GraphQLiteralGen extends GraphQLiteralGenTypes {}
}
