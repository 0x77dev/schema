/**
 * This file is automatically generated not make changes directly
 * This fill will regenerate when the server is started 
 * and NODE_ENV !== "production".
 * 
 * These types are only for internal use by gqliteral and subject 
 * to change. The "*Args" / InputObject types are the only types 
 * intended for external usage.
 * 
 * If you want more robust types to use in your code, look into one of:
 *
 * https://github.com/dotansimha/graphql-code-generator
 * https://github.com/prisma/graphqlgen
 * https://github.com/apollographql/apollo-tooling
 */


// Maybe Promise
type MP<T> = PromiseLike<T> | T;

// Maybe Promise List
type MPL<T> = MP<T>[];

// Maybe Thunk
type MT<T> = T | (() => T);

// Maybe Thunk, with args
type MTA<T, A> = T | ((args?: A) => T);

type QueryDroidReturnType = MP<DroidReturnType>;

export interface QueryDroidArgs {
  id: string;
}

type QueryHeroReturnType = MP<CharacterReturnType>;

export interface QueryHeroArgs {
  episode?: Episode;
}

type QueryHumanReturnType = MP<HumanReturnType>;

export interface QueryHumanArgs {
  id: string;
}

type QueryRootType = {};

type QueryReturnType = {};

type DroidAppearsInReturnType = MP<MPL<MP<Episode>>>;

export interface DroidAppearsInArgs extends CharacterAppearsInArgs {}

type DroidFriendsReturnType = MP<MPL<MP<CharacterReturnType>>>;

type DroidIdReturnType = MP<string>;

type DroidNameReturnType = MP<string>;

type DroidPrimaryFunctionReturnType = MP<string>;

interface DroidRootType {
  appearsIn: Episode[];
  friends: any[];
  id: string;
  name: string;
  primaryFunction?: string;
}

interface DroidReturnType {
  appearsIn: Episode[];
  friends: any[];
  id: string;
  name: string;
  primaryFunction?: string;
}

type CharacterAppearsInReturnType = MP<MPL<MP<Episode>>>;

export interface CharacterAppearsInArgs {
  id: string;
}

type CharacterFriendsReturnType = MP<MPL<MP<CharacterReturnType>>>;

type CharacterIdReturnType = MP<string>;

type CharacterNameReturnType = MP<string>;

export type Episode = 5 | 6 | 4;

type HumanAppearsInReturnType = MP<MPL<MP<Episode>>>;

export interface HumanAppearsInArgs extends CharacterAppearsInArgs {}

type HumanFriendsReturnType = MP<MPL<MP<CharacterReturnType>>>;

type HumanHomePlanetReturnType = MP<null | string>;

type HumanIdReturnType = MP<string>;

type HumanNameReturnType = MP<string>;

type HumanRootType = swapi.Human;

type HumanReturnType = swapi.Human

export type MoreEpisodes = 5 | 6 | 4 | "OTHER";

type CharacterRootType = DroidRootType | HumanRootType

type CharacterReturnType = DroidReturnType | HumanReturnType

interface GQLiteralGenArgTypes {
  Query: {
    droid: QueryDroidArgs;
    hero: QueryHeroArgs;
    human: QueryHumanArgs;
  };
  Droid: {
    appearsIn: DroidAppearsInArgs;
  };
  Character: {
    appearsIn: CharacterAppearsInArgs;
  };
  Human: {
    appearsIn: HumanAppearsInArgs;
  };
}

interface GQLiteralGenRootTypes {
  Character: CharacterRootType;
  Query: QueryRootType;
  Droid: DroidRootType;
  Human: HumanRootType;
}

interface GQLiteralGenReturnTypes {
  Query: {
    droid: QueryDroidReturnType;
    hero: QueryHeroReturnType;
    human: QueryHumanReturnType;
  };
  Droid: {
    appearsIn: DroidAppearsInReturnType;
    friends: DroidFriendsReturnType;
    id: DroidIdReturnType;
    name: DroidNameReturnType;
    primaryFunction: DroidPrimaryFunctionReturnType;
  };
  Character: {
    appearsIn: CharacterAppearsInReturnType;
    friends: CharacterFriendsReturnType;
    id: CharacterIdReturnType;
    name: CharacterNameReturnType;
  };
  Human: {
    appearsIn: HumanAppearsInReturnType;
    friends: HumanFriendsReturnType;
    homePlanet: HumanHomePlanetReturnType;
    id: HumanIdReturnType;
    name: HumanNameReturnType;
  };
}

interface GQLiteralGenTypes {
  argTypes: GQLiteralGenArgTypes;
  rootTypes: GQLiteralGenRootTypes;
  returnTypes: GQLiteralGenReturnTypes;
}

export type Gen = GQLiteralGenTypes;

declare global {
  interface GQLiteralGen extends GQLiteralGenTypes {}
}
