/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 *
 * For better typings, you should provide configuration for how to lookup
 * the types. See the documentation for "typegenAutoConfig"
 */
import { GraphQLResolveInfo } from "graphql";
import * as swapi from "./types/backingTypes";
declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

interface NexusGenEnums {
  Episode: 5 | 6 | 4;
  MoreEpisodes: 5 | 6 | 4 | "OTHER";
}

export interface NexusGenRootTypes {
  Character: swapi.Character;
  Droid: swapi.Droid;
  Human: swapi.Human;
  Query: {};
}

export interface NexusGenReturnTypes {
  Character: {
    // return type
    appearsIn: NexusGenEnums["Episode"][]; // [Episode!]!
    friends: Array<undefined | null>; // [Character!]!
    id: string; // String!
    name: string; // String!
  };
  Droid: {
    // return type
    appearsIn: NexusGenEnums["Episode"][]; // [Episode!]!
    friends: Array<undefined | null>; // [Character!]!
    id: string; // String!
    name: string; // String!
    primaryFunction: string; // String!
  };
  Human: {
    // return type
    appearsIn: NexusGenEnums["Episode"][]; // [Episode!]!
    friends: Array<undefined | null>; // [Character!]!
    homePlanet: string | null; // String
    id: string; // String!
    name: string; // String!
  };
  Query: {
    // return type
    droid: NexusGenRootTypes["Droid"]; // Droid!
    hero: undefined | null; // Character!
    human: NexusGenRootTypes["Human"]; // Human!
  };
}

export interface NexusGenArgTypes {
  Character: {
    appearsIn: {
      // args
      id: string; // ID!
    };
  };
  Droid: {
    appearsIn: {
      // args
      id: string; // ID!
    };
  };
  Human: {
    appearsIn: {
      // args
      id: string; // ID!
    };
  };
  Query: {
    droid: {
      // args
      id: string; // String!
    };
    hero: {
      // args
      episode?: NexusGenEnums["Episode"] | null; // Episode
    };
    human: {
      // args
      id: string; // String!
    };
  };
}

interface NexusGenAbstractResolveSourceTypes {
  Character: NexusGenRootTypes["Droid"] | NexusGenRootTypes["Human"];
}

interface NexusGenAbstractResolveReturnTypes {
  Character: "Droid" | "Human";
}

export type NexusGenObjectNames = "Droid" | "Human" | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "Episode" | "MoreEpisodes";

export type NexusGenInterfaceNames = "Character";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: swapi.ContextType;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  returnTypes: NexusGenReturnTypes;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["enumNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveRoot: NexusGenAbstractResolveSourceTypes;
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

export type Gen = NexusGenTypes;

type MaybePromise<T> = PromiseLike<T> | T;
type ArgType<TypeName, FieldName> = TypeName extends keyof NexusGenArgTypes
  ? FieldName extends keyof NexusGenArgTypes[TypeName]
    ? NexusGenArgTypes[TypeName][FieldName]
    : {}
  : {};

export type NexusResolver<
  TypeName extends keyof NexusGenReturnTypes & keyof NexusGenRootTypes,
  FieldName extends keyof NexusGenReturnTypes[TypeName]
> = (
  root: NexusGenRootTypes[TypeName],
  args: ArgType<TypeName, FieldName>,
  context: NexusGenTypes["context"],
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenReturnTypes[TypeName][FieldName]>;

export type NexusAbstractTypeResolver<
  TypeName extends keyof NexusGenAbstractResolveReturnTypes &
    keyof NexusGenAbstractResolveSourceTypes
> = (
  root: NexusGenAbstractResolveSourceTypes[TypeName],
  context: NexusGenTypes["context"],
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenAbstractResolveReturnTypes[TypeName]>;
