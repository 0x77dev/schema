### This file was autogenerated by graphqliteral
### Do not make changes to this file directly

type ArrayTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type CallSignatureDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ClassDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  members: [Node!]!
  modifiers: [Token!]
  nameText: String
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ComputedPropertyName implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ConditionalTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ConstructorDeclaration implements Node {
  asteriskToken: Token
  end: Int!
  exclamationToken: Token
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parameters: [ParameterDeclaration!]!
  parent: Node!
  pos: Int!
  questionToken: Token
  rawText(skip: [SyntaxKind!]): String!
  type: Node
  typeParameters: [TypeParameterDeclaration!]
}

type ConstructorTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ConstructSignatureDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type EnumDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ExportAssignment implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ExportDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type FunctionDeclaration implements Node {
  asteriskToken: Token
  end: Int!
  exclamationToken: Token
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parameters: [ParameterDeclaration!]!
  parent: Node!
  pos: Int!
  questionToken: Token
  rawText(skip: [SyntaxKind!]): String!
  type: Node
  typeParameters: [TypeParameterDeclaration!]
}

type FunctionTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type GetAccessorDeclaration implements Node {
  asteriskToken: Token
  end: Int!
  exclamationToken: Token
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parameters: [ParameterDeclaration!]!
  parent: Node!
  pos: Int!
  questionToken: Token
  rawText(skip: [SyntaxKind!]): String!
  type: Node
  typeParameters: [TypeParameterDeclaration!]
}

type Identifier implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ImportDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ImportEqualsDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ImportTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type IndexedAccessTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type IndexSignatureDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type InferTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type InterfaceDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type IntersectionTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type JSDoc implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type JSDocNamespaceDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type KeywordTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type LiteralTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type MappedTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type MethodDeclaration implements Node {
  asteriskToken: Token
  end: Int!
  exclamationToken: Token
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parameters: [ParameterDeclaration!]!
  parent: Node!
  pos: Int!
  questionToken: Token
  rawText(skip: [SyntaxKind!]): String!
  type: Node
  typeParameters: [TypeParameterDeclaration!]
}

type MissingDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ModuleDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type NamedDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type NamespaceDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type NamespaceExportDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

interface Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

enum NodeFlags {
  Ambient
  AwaitContext
  BlockScoped
  Const
  ContainsThis
  ContextFlags
  DecoratorContext
  DisallowInContext
  ExportContext
  GlobalAugmentation
  HasAggregatedChildData
  HasAsyncFunctions
  HasExplicitReturn
  HasImplicitReturn
  InWithStatement
  JavaScriptFile
  JSDoc
  JsonFile
  Let
  Namespace
  NestedNamespace
  None
  PermanentlySetIncrementalFlags
  PossiblyContainsDynamicImport
  PossiblyContainsImportMeta
  ReachabilityAndEmitFlags
  ReachabilityCheckFlags
  Synthesized
  ThisNodeHasError
  ThisNodeOrAnySubNodesHasError
  TypeExcludesFlags
  UNKNOWN
  YieldContext
}

type NumericLiteral implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type OptionalTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type ParameterDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
  type: Node
}

type ParenthesizedTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type PropertyDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type PropertyLikeDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

union PropertyName = ComputedPropertyName | Identifier | NumericLiteral | StringLiteral

type Query {
  parseFile(file: String!): SourceFile!
}

type RestTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type SetAccessorDeclaration implements Node {
  asteriskToken: Token
  end: Int!
  exclamationToken: Token
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parameters: [ParameterDeclaration!]!
  parent: Node!
  pos: Int!
  questionToken: Token
  rawText(skip: [SyntaxKind!]): String!
  type: Node
  typeParameters: [TypeParameterDeclaration!]
}

type SourceFile implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
  statements: [Node!]!
}

type StringLiteral implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

enum SyntaxKind {
  AbstractKeyword
  AmpersandAmpersandToken
  AmpersandEqualsToken
  AmpersandToken
  AnyKeyword
  ArrayBindingPattern
  ArrayLiteralExpression
  ArrayType
  ArrowFunction
  AsExpression
  AsKeyword
  AsteriskAsteriskEqualsToken
  AsteriskAsteriskToken
  AsteriskEqualsToken
  AsteriskToken
  AsyncKeyword
  AtToken
  AwaitExpression
  AwaitKeyword
  BarBarToken
  BarEqualsToken
  BarToken
  BigIntKeyword
  BigIntLiteral
  BinaryExpression
  BindingElement
  Block
  BooleanKeyword
  BreakKeyword
  BreakStatement
  Bundle
  CallExpression
  CallSignature
  CaretEqualsToken
  CaretToken
  CaseBlock
  CaseClause
  CaseKeyword
  CatchClause
  CatchKeyword
  ClassDeclaration
  ClassExpression
  ClassKeyword
  CloseBraceToken
  CloseBracketToken
  CloseParenToken
  ColonToken
  CommaListExpression
  CommaToken
  ComputedPropertyName
  ConditionalExpression
  ConditionalType
  ConflictMarkerTrivia
  ConstKeyword
  Constructor
  ConstructorKeyword
  ConstructorType
  ConstructSignature
  ContinueKeyword
  ContinueStatement
  Count
  DebuggerKeyword
  DebuggerStatement
  DeclareKeyword
  Decorator
  DefaultClause
  DefaultKeyword
  DeleteExpression
  DeleteKeyword
  DoKeyword
  DoStatement
  DotDotDotToken
  DotToken
  ElementAccessExpression
  ElseKeyword
  EmptyStatement
  EndOfDeclarationMarker
  EndOfFileToken
  EnumDeclaration
  EnumKeyword
  EnumMember
  EqualsEqualsEqualsToken
  EqualsEqualsToken
  EqualsGreaterThanToken
  EqualsToken
  ExclamationEqualsEqualsToken
  ExclamationEqualsToken
  ExclamationToken
  ExportAssignment
  ExportDeclaration
  ExportKeyword
  ExportSpecifier
  ExpressionStatement
  ExpressionWithTypeArguments
  ExtendsKeyword
  ExternalModuleReference
  FalseKeyword
  FinallyKeyword
  FirstAssignment
  FirstBinaryOperator
  FirstCompoundAssignment
  FirstContextualKeyword
  FirstFutureReservedWord
  FirstJSDocNode
  FirstJSDocTagNode
  FirstKeyword
  FirstLiteralToken
  FirstNode
  FirstPunctuation
  FirstReservedWord
  FirstTemplateToken
  FirstToken
  FirstTriviaToken
  FirstTypeNode
  ForInStatement
  ForKeyword
  ForOfStatement
  ForStatement
  FromKeyword
  FunctionDeclaration
  FunctionExpression
  FunctionKeyword
  FunctionType
  GetAccessor
  GetKeyword
  GlobalKeyword
  GreaterThanEqualsToken
  GreaterThanGreaterThanEqualsToken
  GreaterThanGreaterThanGreaterThanEqualsToken
  GreaterThanGreaterThanGreaterThanToken
  GreaterThanGreaterThanToken
  GreaterThanToken
  HeritageClause
  Identifier
  IfKeyword
  IfStatement
  ImplementsKeyword
  ImportClause
  ImportDeclaration
  ImportEqualsDeclaration
  ImportKeyword
  ImportSpecifier
  ImportType
  IndexedAccessType
  IndexSignature
  InferKeyword
  InferType
  InKeyword
  InputFiles
  InstanceOfKeyword
  InterfaceDeclaration
  InterfaceKeyword
  IntersectionType
  IsKeyword
  JSDocAllType
  JSDocAugmentsTag
  JSDocCallbackTag
  JSDocClassTag
  JSDocComment
  JSDocEnumTag
  JSDocFunctionType
  JSDocNonNullableType
  JSDocNullableType
  JSDocOptionalType
  JSDocParameterTag
  JSDocPropertyTag
  JSDocReturnTag
  JSDocSignature
  JSDocTag
  JSDocTemplateTag
  JSDocThisTag
  JSDocTypedefTag
  JSDocTypeExpression
  JSDocTypeLiteral
  JSDocTypeTag
  JSDocUnknownType
  JSDocVariadicType
  JsxAttribute
  JsxAttributes
  JsxClosingElement
  JsxClosingFragment
  JsxElement
  JsxExpression
  JsxFragment
  JsxOpeningElement
  JsxOpeningFragment
  JsxSelfClosingElement
  JsxSpreadAttribute
  JsxText
  JsxTextAllWhiteSpaces
  KeyOfKeyword
  LabeledStatement
  LastAssignment
  LastBinaryOperator
  LastCompoundAssignment
  LastContextualKeyword
  LastFutureReservedWord
  LastJSDocNode
  LastJSDocTagNode
  LastKeyword
  LastLiteralToken
  LastPunctuation
  LastReservedWord
  LastTemplateToken
  LastToken
  LastTriviaToken
  LastTypeNode
  LessThanEqualsToken
  LessThanLessThanEqualsToken
  LessThanLessThanToken
  LessThanSlashToken
  LessThanToken
  LetKeyword
  LiteralType
  MappedType
  MergeDeclarationMarker
  MetaProperty
  MethodDeclaration
  MethodSignature
  MinusEqualsToken
  MinusMinusToken
  MinusToken
  MissingDeclaration
  ModuleBlock
  ModuleDeclaration
  ModuleKeyword
  MultiLineCommentTrivia
  NamedExports
  NamedImports
  NamespaceExportDeclaration
  NamespaceImport
  NamespaceKeyword
  NeverKeyword
  NewExpression
  NewKeyword
  NewLineTrivia
  NonNullExpression
  NoSubstitutionTemplateLiteral
  NotEmittedStatement
  NullKeyword
  NumberKeyword
  NumericLiteral
  ObjectBindingPattern
  ObjectKeyword
  ObjectLiteralExpression
  OfKeyword
  OmittedExpression
  OpenBraceToken
  OpenBracketToken
  OpenParenToken
  OptionalType
  PackageKeyword
  Parameter
  ParenthesizedExpression
  ParenthesizedType
  PartiallyEmittedExpression
  PercentEqualsToken
  PercentToken
  PlusEqualsToken
  PlusPlusToken
  PlusToken
  PostfixUnaryExpression
  PrefixUnaryExpression
  PrivateKeyword
  PropertyAccessExpression
  PropertyAssignment
  PropertyDeclaration
  PropertySignature
  ProtectedKeyword
  PublicKeyword
  QualifiedName
  QuestionToken
  ReadonlyKeyword
  RegularExpressionLiteral
  RequireKeyword
  RestType
  ReturnKeyword
  ReturnStatement
  SemicolonClassElement
  SemicolonToken
  SetAccessor
  SetKeyword
  ShebangTrivia
  ShorthandPropertyAssignment
  SingleLineCommentTrivia
  SlashEqualsToken
  SlashToken
  SourceFile
  SpreadAssignment
  SpreadElement
  StaticKeyword
  StringKeyword
  StringLiteral
  SuperKeyword
  SwitchKeyword
  SwitchStatement
  SymbolKeyword
  SyntaxList
  SyntheticExpression
  TaggedTemplateExpression
  TemplateExpression
  TemplateHead
  TemplateMiddle
  TemplateSpan
  TemplateTail
  ThisKeyword
  ThisType
  ThrowKeyword
  ThrowStatement
  TildeToken
  TrueKeyword
  TryKeyword
  TryStatement
  TupleType
  TypeAliasDeclaration
  TypeAssertionExpression
  TypeKeyword
  TypeLiteral
  TypeOfExpression
  TypeOfKeyword
  TypeOperator
  TypeParameter
  TypePredicate
  TypeQuery
  TypeReference
  UndefinedKeyword
  UnionType
  UniqueKeyword
  Unknown
  UnknownKeyword
  UnparsedSource
  VariableDeclaration
  VariableDeclarationList
  VariableStatement
  VarKeyword
  VoidExpression
  VoidKeyword
  WhileKeyword
  WhileStatement
  WhitespaceTrivia
  WithKeyword
  WithStatement
  YieldExpression
  YieldKeyword
}

type ThisTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type Token {
  kind: SyntaxKind!
}

type TupleTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type TypeAliasDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type TypeParameterDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type TypeReference implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  nameText: String
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
  text: String
}

type UnionTypeNode implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type UNKNOWN_NODE implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}

type VariableDeclaration implements Node {
  end: Int!
  flags: NodeFlags!
  kind: SyntaxKind!
  kindCode: Int!
  modifiers: [Token!]
  parent: Node!
  pos: Int!
  rawText(skip: [SyntaxKind!]): String!
}
