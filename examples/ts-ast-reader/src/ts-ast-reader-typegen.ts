/**
 * This file is automatically generated. Do not make changes directly.
 * 
 * By default this will regenerate when the server is started 
 * and NODE_ENV !== "production".
 * 
 * Mostly for internal use by GraphQLiteral unless otherwise 
 * documented / subject to change.
 * 
 * If you want more configurable types to use elsewhere, look into one of:
 *
 * https://github.com/dotansimha/graphql-code-generator
 * https://github.com/prisma/graphqlgen
 * https://github.com/apollographql/apollo-tooling
 */


declare global {
  interface GraphQLiteralGen extends GraphQLiteralGenTypes {}
}

// Maybe Promise
type MaybePromise<T> = T | PromiseLike<T>;

// Maybe Promise List
type MaybePromiseList<T> = Iterable<MaybePromise<T>>;

// Maybe Thunk
type MaybeThunk<T> = T | (() => T);

// Maybe Thunk, with args
type MaybeThunkArgs<T, A> = T | ((args?: A) => T);

export type QueryParseFileReturnType = SourceFileReturnType;

export interface QueryParseFileArgs {
  file: string;
}

export type QueryRootType = {};

export type QueryReturnType = {};

export type SourceFileStatementsReturnType = MaybePromiseList<StatementReturnType>;

export type SourceFileRootType = {};

export type SourceFileReturnType = {};

export type StatementRootType = ClassDeclarationRootType | EnumDeclarationRootType | ExportAssignmentRootType | ExportDeclarationRootType | ImportDeclarationRootType | ImportEqualsDeclarationRootType | InterfaceDeclarationRootType | MissingDeclarationRootType | ModuleDeclarationRootType | NamespaceExportDeclarationRootType | TypeAliasDeclarationRootType;

export type StatementReturnType = ClassDeclarationReturnType | EnumDeclarationReturnType | ExportAssignmentReturnType | ExportDeclarationReturnType | ImportDeclarationReturnType | ImportEqualsDeclarationReturnType | InterfaceDeclarationReturnType | MissingDeclarationReturnType | ModuleDeclarationReturnType | NamespaceExportDeclarationReturnType | TypeAliasDeclarationReturnType;

export type ClassDeclarationEndReturnType = number;

export type ClassDeclarationFlagsReturnType = NodeFlags;

export type ClassDeclarationKindReturnType = SyntaxKind;

export type ClassDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ClassDeclarationOkReturnType = boolean;

export type ClassDeclarationParentReturnType = NodeReturnType;

export type ClassDeclarationPosReturnType = number;

export interface ClassDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type ClassDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type NodeEndReturnType = number;

export type NodeFlagsReturnType = NodeFlags;

export type NodeKindReturnType = SyntaxKind;

export type NodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NodeParentReturnType = NodeReturnType;

export type NodePosReturnType = number;

export type NodeFlags = 4194304 | 16384 | 3 | 2 | 64 | 12679168 | 8192 | 2048 | 32 | 512 | 262144 | 1024 | 256 | 128 | 8388608 | 65536 | 2097152 | 16777216 | 1 | 16 | 4 | 0 | 1572864 | 524288 | 1048576 | 1408 | 384 | 8 | 32768 | 131072 | 20480 | 4194816 | 4096;

export type SyntaxKind = 117 | 53 | 68 | 48 | 119 | 183 | 185 | 167 | 195 | 210 | 118 | 62 | 40 | 61 | 39 | 120 | 57 | 199 | 121 | 54 | 69 | 49 | 202 | 184 | 216 | 122 | 72 | 227 | 278 | 189 | 158 | 70 | 50 | 244 | 269 | 73 | 272 | 74 | 238 | 207 | 75 | 18 | 22 | 20 | 56 | 307 | 26 | 147 | 203 | 173 | 7 | 76 | 155 | 123 | 164 | 159 | 77 | 226 | 310 | 78 | 234 | 124 | 150 | 270 | 79 | 196 | 80 | 81 | 221 | 24 | 23 | 188 | 82 | 218 | 309 | 1 | 241 | 83 | 276 | 34 | 32 | 36 | 58 | 35 | 33 | 51 | 252 | 253 | 84 | 255 | 219 | 209 | 85 | 257 | 86 | 87 | 58 | 27 | 59 | 117 | 108 | 281 | 292 | 72 | 8 | 146 | 17 | 72 | 13 | 0 | 2 | 161 | 224 | 88 | 225 | 223 | 143 | 237 | 194 | 89 | 163 | 156 | 125 | 144 | 31 | 66 | 67 | 47 | 46 | 29 | 271 | 71 | 90 | 220 | 108 | 248 | 247 | 246 | 91 | 251 | 181 | 178 | 160 | 126 | 174 | 92 | 280 | 93 | 239 | 109 | 172 | 127 | 282 | 293 | 295 | 294 | 289 | 296 | 287 | 285 | 284 | 286 | 297 | 303 | 298 | 291 | 292 | 301 | 299 | 302 | 281 | 290 | 300 | 283 | 288 | 265 | 266 | 261 | 264 | 258 | 268 | 262 | 260 | 263 | 259 | 267 | 10 | 11 | 128 | 231 | 70 | 70 | 70 | 145 | 116 | 303 | 303 | 145 | 13 | 70 | 107 | 16 | 145 | 7 | 181 | 30 | 65 | 45 | 28 | 27 | 110 | 180 | 179 | 308 | 212 | 154 | 153 | 60 | 44 | 38 | 256 | 243 | 242 | 129 | 3 | 254 | 250 | 245 | 249 | 130 | 131 | 190 | 94 | 4 | 211 | 13 | 305 | 95 | 134 | 8 | 182 | 135 | 186 | 145 | 208 | 17 | 21 | 19 | 169 | 111 | 149 | 193 | 175 | 306 | 64 | 42 | 59 | 43 | 37 | 201 | 200 | 112 | 187 | 273 | 152 | 151 | 113 | 114 | 146 | 55 | 132 | 12 | 133 | 170 | 96 | 228 | 215 | 25 | 157 | 136 | 6 | 274 | 2 | 63 | 41 | 277 | 275 | 206 | 115 | 137 | 9 | 97 | 98 | 230 | 138 | 304 | 213 | 191 | 204 | 14 | 15 | 214 | 16 | 99 | 176 | 100 | 232 | 52 | 101 | 102 | 233 | 168 | 240 | 192 | 139 | 166 | 197 | 103 | 177 | 148 | 161 | 165 | 162 | 140 | 171 | 141 | 0 | 142 | 279 | 235 | 236 | 217 | 104 | 198 | 105 | 106 | 222 | 5 | 107 | 229 | 205 | 116;

export type TokenEndReturnType = number;

export type TokenFlagsReturnType = NodeFlags;

export type TokenKindReturnType = SyntaxKind;

export type TokenModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type TokenParentReturnType = NodeReturnType;

export type TokenPosReturnType = number;

export interface TokenRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  parent: any;
  pos: number;
}

export type TokenReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type EnumDeclarationEndReturnType = number;

export type EnumDeclarationFlagsReturnType = NodeFlags;

export type EnumDeclarationKindReturnType = SyntaxKind;

export type EnumDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type EnumDeclarationOkReturnType = boolean;

export type EnumDeclarationParentReturnType = NodeReturnType;

export type EnumDeclarationPosReturnType = number;

export interface EnumDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type EnumDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type ExportAssignmentEndReturnType = number;

export type ExportAssignmentFlagsReturnType = NodeFlags;

export type ExportAssignmentKindReturnType = SyntaxKind;

export type ExportAssignmentModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ExportAssignmentOkReturnType = boolean;

export type ExportAssignmentParentReturnType = NodeReturnType;

export type ExportAssignmentPosReturnType = number;

export interface ExportAssignmentRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type ExportAssignmentReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type ExportDeclarationEndReturnType = number;

export type ExportDeclarationFlagsReturnType = NodeFlags;

export type ExportDeclarationKindReturnType = SyntaxKind;

export type ExportDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ExportDeclarationOkReturnType = boolean;

export type ExportDeclarationParentReturnType = NodeReturnType;

export type ExportDeclarationPosReturnType = number;

export interface ExportDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type ExportDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type ImportDeclarationEndReturnType = number;

export type ImportDeclarationFlagsReturnType = NodeFlags;

export type ImportDeclarationKindReturnType = SyntaxKind;

export type ImportDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ImportDeclarationOkReturnType = boolean;

export type ImportDeclarationParentReturnType = NodeReturnType;

export type ImportDeclarationPosReturnType = number;

export interface ImportDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type ImportDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type ImportEqualsDeclarationEndReturnType = number;

export type ImportEqualsDeclarationFlagsReturnType = NodeFlags;

export type ImportEqualsDeclarationKindReturnType = SyntaxKind;

export type ImportEqualsDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ImportEqualsDeclarationOkReturnType = boolean;

export type ImportEqualsDeclarationParentReturnType = NodeReturnType;

export type ImportEqualsDeclarationPosReturnType = number;

export interface ImportEqualsDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type ImportEqualsDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type InterfaceDeclarationEndReturnType = number;

export type InterfaceDeclarationFlagsReturnType = NodeFlags;

export type InterfaceDeclarationKindReturnType = SyntaxKind;

export type InterfaceDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type InterfaceDeclarationOkReturnType = boolean;

export type InterfaceDeclarationParentReturnType = NodeReturnType;

export type InterfaceDeclarationPosReturnType = number;

export interface InterfaceDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type InterfaceDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type MissingDeclarationEndReturnType = number;

export type MissingDeclarationFlagsReturnType = NodeFlags;

export type MissingDeclarationKindReturnType = SyntaxKind;

export type MissingDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type MissingDeclarationOkReturnType = boolean;

export type MissingDeclarationParentReturnType = NodeReturnType;

export type MissingDeclarationPosReturnType = number;

export interface MissingDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type MissingDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type ModuleDeclarationEndReturnType = number;

export type ModuleDeclarationFlagsReturnType = NodeFlags;

export type ModuleDeclarationKindReturnType = SyntaxKind;

export type ModuleDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ModuleDeclarationOkReturnType = boolean;

export type ModuleDeclarationParentReturnType = NodeReturnType;

export type ModuleDeclarationPosReturnType = number;

export interface ModuleDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type ModuleDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type NamespaceExportDeclarationEndReturnType = number;

export type NamespaceExportDeclarationFlagsReturnType = NodeFlags;

export type NamespaceExportDeclarationKindReturnType = SyntaxKind;

export type NamespaceExportDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NamespaceExportDeclarationOkReturnType = boolean;

export type NamespaceExportDeclarationParentReturnType = NodeReturnType;

export type NamespaceExportDeclarationPosReturnType = number;

export interface NamespaceExportDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type NamespaceExportDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type TypeAliasDeclarationEndReturnType = number;

export type TypeAliasDeclarationFlagsReturnType = NodeFlags;

export type TypeAliasDeclarationKindReturnType = SyntaxKind;

export type TypeAliasDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type TypeAliasDeclarationOkReturnType = boolean;

export type TypeAliasDeclarationParentReturnType = NodeReturnType;

export type TypeAliasDeclarationPosReturnType = number;

export interface TypeAliasDeclarationRootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  modifiers?: null | any[];
  ok?: boolean;
  parent: any;
  pos: number;
}

export type TypeAliasDeclarationReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  ok?: MaybeThunk<MaybePromise<boolean>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
}

export type NodeRootType = ClassDeclarationRootType | TokenRootType | EnumDeclarationRootType | ExportAssignmentRootType | ExportDeclarationRootType | ImportDeclarationRootType | ImportEqualsDeclarationRootType | InterfaceDeclarationRootType | MissingDeclarationRootType | ModuleDeclarationRootType | NamespaceExportDeclarationRootType | TypeAliasDeclarationRootType;

export type NodeReturnType = ClassDeclarationReturnType | TokenReturnType | EnumDeclarationReturnType | ExportAssignmentReturnType | ExportDeclarationReturnType | ImportDeclarationReturnType | ImportEqualsDeclarationReturnType | InterfaceDeclarationReturnType | MissingDeclarationReturnType | ModuleDeclarationReturnType | NamespaceExportDeclarationReturnType | TypeAliasDeclarationReturnType;

export interface GraphQLiteralGenArgTypes {
  Query: {
    parseFile: QueryParseFileArgs;
  };
}

export interface GraphQLiteralGenRootTypes {
  Node: NodeRootType;
  Query: QueryRootType;
  SourceFile: SourceFileRootType;
  ClassDeclaration: ClassDeclarationRootType;
  Token: TokenRootType;
  EnumDeclaration: EnumDeclarationRootType;
  ExportAssignment: ExportAssignmentRootType;
  ExportDeclaration: ExportDeclarationRootType;
  ImportDeclaration: ImportDeclarationRootType;
  ImportEqualsDeclaration: ImportEqualsDeclarationRootType;
  InterfaceDeclaration: InterfaceDeclarationRootType;
  MissingDeclaration: MissingDeclarationRootType;
  ModuleDeclaration: ModuleDeclarationRootType;
  NamespaceExportDeclaration: NamespaceExportDeclarationRootType;
  TypeAliasDeclaration: TypeAliasDeclarationRootType;
}

export interface GraphQLiteralGenReturnTypes {
  Query: {
    parseFile: QueryParseFileReturnType;
  };
  SourceFile: {
    statements: SourceFileStatementsReturnType;
  };
  ClassDeclaration: {
    end: ClassDeclarationEndReturnType;
    flags: ClassDeclarationFlagsReturnType;
    kind: ClassDeclarationKindReturnType;
    modifiers: ClassDeclarationModifiersReturnType;
    ok: ClassDeclarationOkReturnType;
    parent: ClassDeclarationParentReturnType;
    pos: ClassDeclarationPosReturnType;
  };
  Node: {
    end: NodeEndReturnType;
    flags: NodeFlagsReturnType;
    kind: NodeKindReturnType;
    modifiers: NodeModifiersReturnType;
    parent: NodeParentReturnType;
    pos: NodePosReturnType;
  };
  Token: {
    end: TokenEndReturnType;
    flags: TokenFlagsReturnType;
    kind: TokenKindReturnType;
    modifiers: TokenModifiersReturnType;
    parent: TokenParentReturnType;
    pos: TokenPosReturnType;
  };
  EnumDeclaration: {
    end: EnumDeclarationEndReturnType;
    flags: EnumDeclarationFlagsReturnType;
    kind: EnumDeclarationKindReturnType;
    modifiers: EnumDeclarationModifiersReturnType;
    ok: EnumDeclarationOkReturnType;
    parent: EnumDeclarationParentReturnType;
    pos: EnumDeclarationPosReturnType;
  };
  ExportAssignment: {
    end: ExportAssignmentEndReturnType;
    flags: ExportAssignmentFlagsReturnType;
    kind: ExportAssignmentKindReturnType;
    modifiers: ExportAssignmentModifiersReturnType;
    ok: ExportAssignmentOkReturnType;
    parent: ExportAssignmentParentReturnType;
    pos: ExportAssignmentPosReturnType;
  };
  ExportDeclaration: {
    end: ExportDeclarationEndReturnType;
    flags: ExportDeclarationFlagsReturnType;
    kind: ExportDeclarationKindReturnType;
    modifiers: ExportDeclarationModifiersReturnType;
    ok: ExportDeclarationOkReturnType;
    parent: ExportDeclarationParentReturnType;
    pos: ExportDeclarationPosReturnType;
  };
  ImportDeclaration: {
    end: ImportDeclarationEndReturnType;
    flags: ImportDeclarationFlagsReturnType;
    kind: ImportDeclarationKindReturnType;
    modifiers: ImportDeclarationModifiersReturnType;
    ok: ImportDeclarationOkReturnType;
    parent: ImportDeclarationParentReturnType;
    pos: ImportDeclarationPosReturnType;
  };
  ImportEqualsDeclaration: {
    end: ImportEqualsDeclarationEndReturnType;
    flags: ImportEqualsDeclarationFlagsReturnType;
    kind: ImportEqualsDeclarationKindReturnType;
    modifiers: ImportEqualsDeclarationModifiersReturnType;
    ok: ImportEqualsDeclarationOkReturnType;
    parent: ImportEqualsDeclarationParentReturnType;
    pos: ImportEqualsDeclarationPosReturnType;
  };
  InterfaceDeclaration: {
    end: InterfaceDeclarationEndReturnType;
    flags: InterfaceDeclarationFlagsReturnType;
    kind: InterfaceDeclarationKindReturnType;
    modifiers: InterfaceDeclarationModifiersReturnType;
    ok: InterfaceDeclarationOkReturnType;
    parent: InterfaceDeclarationParentReturnType;
    pos: InterfaceDeclarationPosReturnType;
  };
  MissingDeclaration: {
    end: MissingDeclarationEndReturnType;
    flags: MissingDeclarationFlagsReturnType;
    kind: MissingDeclarationKindReturnType;
    modifiers: MissingDeclarationModifiersReturnType;
    ok: MissingDeclarationOkReturnType;
    parent: MissingDeclarationParentReturnType;
    pos: MissingDeclarationPosReturnType;
  };
  ModuleDeclaration: {
    end: ModuleDeclarationEndReturnType;
    flags: ModuleDeclarationFlagsReturnType;
    kind: ModuleDeclarationKindReturnType;
    modifiers: ModuleDeclarationModifiersReturnType;
    ok: ModuleDeclarationOkReturnType;
    parent: ModuleDeclarationParentReturnType;
    pos: ModuleDeclarationPosReturnType;
  };
  NamespaceExportDeclaration: {
    end: NamespaceExportDeclarationEndReturnType;
    flags: NamespaceExportDeclarationFlagsReturnType;
    kind: NamespaceExportDeclarationKindReturnType;
    modifiers: NamespaceExportDeclarationModifiersReturnType;
    ok: NamespaceExportDeclarationOkReturnType;
    parent: NamespaceExportDeclarationParentReturnType;
    pos: NamespaceExportDeclarationPosReturnType;
  };
  TypeAliasDeclaration: {
    end: TypeAliasDeclarationEndReturnType;
    flags: TypeAliasDeclarationFlagsReturnType;
    kind: TypeAliasDeclarationKindReturnType;
    modifiers: TypeAliasDeclarationModifiersReturnType;
    ok: TypeAliasDeclarationOkReturnType;
    parent: TypeAliasDeclarationParentReturnType;
    pos: TypeAliasDeclarationPosReturnType;
  };
}

export interface GraphQLiteralGenTypes {
  argTypes: GraphQLiteralGenArgTypes;
  rootTypes: GraphQLiteralGenRootTypes;
  returnTypes: GraphQLiteralGenReturnTypes;
  context: unknown;
  enums: {
    NodeFlags: NodeFlags;
    SyntaxKind: SyntaxKind;
  };
  objects: {
    Query: QueryRootType;
    SourceFile: SourceFileRootType;
    ClassDeclaration: ClassDeclarationRootType;
    Token: TokenRootType;
    EnumDeclaration: EnumDeclarationRootType;
    ExportAssignment: ExportAssignmentRootType;
    ExportDeclaration: ExportDeclarationRootType;
    ImportDeclaration: ImportDeclarationRootType;
    ImportEqualsDeclaration: ImportEqualsDeclarationRootType;
    InterfaceDeclaration: InterfaceDeclarationRootType;
    MissingDeclaration: MissingDeclarationRootType;
    ModuleDeclaration: ModuleDeclarationRootType;
    NamespaceExportDeclaration: NamespaceExportDeclarationRootType;
    TypeAliasDeclaration: TypeAliasDeclarationRootType;
  };
  interfaces: {
    Node: "ClassDeclaration" | "Token" | "EnumDeclaration" | "ExportAssignment" | "ExportDeclaration" | "ImportDeclaration" | "ImportEqualsDeclaration" | "InterfaceDeclaration" | "MissingDeclaration" | "ModuleDeclaration" | "NamespaceExportDeclaration" | "TypeAliasDeclaration";
  };
  unions: {
    Statement: any;
  };
  scalars: {
    String: any;
    Int: any;
    Boolean: any;
  };
  inputObjects: {};
  allInputTypes: 
    | Extract<keyof GraphQLiteralGenTypes['inputObjects'], string>
    | Extract<keyof GraphQLiteralGenTypes['enums'], string>
    | Extract<keyof GraphQLiteralGenTypes['scalars'], string>;
  allOutputTypes: 
    | Extract<keyof GraphQLiteralGenTypes['objects'], string>
    | Extract<keyof GraphQLiteralGenTypes['enums'], string>
    | Extract<keyof GraphQLiteralGenTypes['unions'], string>
    | Extract<keyof GraphQLiteralGenTypes['interfaces'], string>
    | Extract<keyof GraphQLiteralGenTypes['scalars'], string>;
}

export type Gen = GraphQLiteralGenTypes;
