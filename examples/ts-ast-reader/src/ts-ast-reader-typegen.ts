/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 *
 * For better typings, you should provide configuration for how to lookup
 * the types. See the documentation for "typegenAutoConfig"
 */
import { GraphQLResolveInfo } from "graphql";
import * as t from "./types/index";
import ts from "typescript";
declare global {
  interface GraphQLNexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

interface NexusGenEnums {
  NodeFlags:
    | 4194304
    | 16384
    | 3
    | 2
    | 64
    | 12679168
    | 8192
    | 2048
    | 32
    | 512
    | 262144
    | 1024
    | 256
    | 128
    | 8388608
    | 65536
    | 2097152
    | 16777216
    | 1
    | 16
    | 4
    | 0
    | 1572864
    | 524288
    | 1048576
    | 1408
    | 384
    | 8
    | 32768
    | 131072
    | 20480
    | 4194816
    | 4096;
  SyntaxKind:
    | 118
    | 54
    | 69
    | 49
    | 120
    | 185
    | 187
    | 169
    | 197
    | 212
    | 119
    | 63
    | 41
    | 62
    | 40
    | 121
    | 58
    | 201
    | 122
    | 55
    | 70
    | 50
    | 146
    | 9
    | 204
    | 186
    | 218
    | 123
    | 73
    | 229
    | 280
    | 191
    | 160
    | 71
    | 51
    | 246
    | 271
    | 74
    | 274
    | 75
    | 240
    | 209
    | 76
    | 19
    | 23
    | 21
    | 57
    | 309
    | 27
    | 149
    | 205
    | 175
    | 7
    | 77
    | 157
    | 124
    | 166
    | 161
    | 78
    | 228
    | 312
    | 79
    | 236
    | 125
    | 152
    | 272
    | 80
    | 198
    | 81
    | 82
    | 223
    | 25
    | 24
    | 190
    | 83
    | 220
    | 311
    | 1
    | 243
    | 84
    | 278
    | 35
    | 33
    | 37
    | 59
    | 36
    | 34
    | 52
    | 254
    | 255
    | 85
    | 257
    | 221
    | 211
    | 86
    | 259
    | 87
    | 88
    | 59
    | 28
    | 60
    | 118
    | 109
    | 283
    | 294
    | 73
    | 8
    | 148
    | 18
    | 73
    | 14
    | 0
    | 2
    | 163
    | 226
    | 89
    | 227
    | 225
    | 144
    | 239
    | 196
    | 90
    | 165
    | 158
    | 126
    | 145
    | 32
    | 67
    | 68
    | 48
    | 47
    | 30
    | 273
    | 72
    | 91
    | 222
    | 109
    | 250
    | 249
    | 248
    | 92
    | 253
    | 183
    | 180
    | 162
    | 127
    | 176
    | 93
    | 282
    | 94
    | 241
    | 110
    | 174
    | 128
    | 284
    | 295
    | 297
    | 296
    | 291
    | 298
    | 289
    | 287
    | 286
    | 288
    | 299
    | 305
    | 300
    | 293
    | 294
    | 303
    | 301
    | 304
    | 283
    | 292
    | 302
    | 285
    | 290
    | 267
    | 268
    | 263
    | 266
    | 260
    | 270
    | 264
    | 262
    | 265
    | 261
    | 269
    | 11
    | 12
    | 129
    | 233
    | 71
    | 71
    | 71
    | 147
    | 117
    | 305
    | 305
    | 147
    | 14
    | 71
    | 108
    | 17
    | 147
    | 7
    | 183
    | 31
    | 66
    | 46
    | 29
    | 28
    | 111
    | 182
    | 181
    | 310
    | 214
    | 156
    | 155
    | 61
    | 45
    | 39
    | 258
    | 245
    | 244
    | 130
    | 3
    | 256
    | 252
    | 247
    | 251
    | 131
    | 132
    | 192
    | 95
    | 4
    | 213
    | 14
    | 307
    | 96
    | 135
    | 8
    | 184
    | 136
    | 188
    | 147
    | 210
    | 18
    | 22
    | 20
    | 171
    | 112
    | 151
    | 195
    | 177
    | 308
    | 65
    | 43
    | 60
    | 44
    | 38
    | 203
    | 202
    | 113
    | 189
    | 275
    | 154
    | 153
    | 114
    | 115
    | 148
    | 56
    | 133
    | 13
    | 134
    | 172
    | 97
    | 230
    | 217
    | 26
    | 159
    | 137
    | 6
    | 276
    | 2
    | 64
    | 42
    | 279
    | 277
    | 208
    | 116
    | 138
    | 10
    | 98
    | 99
    | 232
    | 139
    | 306
    | 215
    | 193
    | 206
    | 15
    | 16
    | 216
    | 17
    | 100
    | 178
    | 101
    | 234
    | 53
    | 102
    | 103
    | 235
    | 170
    | 242
    | 194
    | 140
    | 168
    | 199
    | 104
    | 179
    | 150
    | 163
    | 167
    | 164
    | 141
    | 173
    | 142
    | 0
    | 143
    | 281
    | 237
    | 238
    | 219
    | 105
    | 200
    | 106
    | 107
    | 224
    | 5
    | 108
    | 231
    | 207
    | 117;
}

export interface NexusGenRootTypes {
  ArrayTypeNode: ts.ArrayTypeNode;
  BindingPattern: ts.BindingPattern;
  CallSignatureDeclaration: ts.CallSignatureDeclaration;
  ClassDeclaration: ts.ClassDeclaration;
  ComputedPropertyName: ts.ComputedPropertyName;
  ConditionalTypeNode: ts.ConditionalTypeNode;
  ConstructSignatureDeclaration: ts.ConstructSignatureDeclaration;
  ConstructorDeclaration: ts.ConstructorDeclaration;
  ConstructorTypeNode: ts.ConstructorTypeNode;
  EnumDeclaration: ts.EnumDeclaration;
  ExportAssignment: ts.ExportAssignment;
  ExportDeclaration: ts.ExportDeclaration;
  FunctionDeclaration: ts.FunctionDeclaration;
  FunctionTypeNode: ts.FunctionTypeNode;
  GetAccessorDeclaration: ts.GetAccessorDeclaration;
  HasJSDoc: ts.HasJSDoc;
  Identifier: ts.Identifier;
  ImportDeclaration: ts.ImportDeclaration;
  ImportEqualsDeclaration: ts.ImportEqualsDeclaration;
  ImportTypeNode: ts.ImportTypeNode;
  IndexSignatureDeclaration: ts.IndexSignatureDeclaration;
  IndexedAccessTypeNode: ts.IndexedAccessTypeNode;
  InferTypeNode: ts.InferTypeNode;
  InterfaceDeclaration: ts.InterfaceDeclaration;
  IntersectionTypeNode: ts.IntersectionTypeNode;
  JSDoc: ts.JSDoc;
  JSDocAugmentsTag: ts.JSDocAugmentsTag;
  JSDocClassTag: ts.JSDocClassTag;
  JSDocEnumTag: ts.JSDocEnumTag;
  JSDocNamespaceDeclaration: ts.JSDocNamespaceDeclaration;
  JSDocReturnTag: ts.JSDocReturnTag;
  JSDocTag: ts.JSDocTag;
  JSDocTemplateTag: ts.JSDocTemplateTag;
  JSDocThisTag: ts.JSDocThisTag;
  JSDocTypeTag: ts.JSDocTypeTag;
  JSDocUnknownTag: ts.JSDocUnknownTag;
  KeywordTypeNode: ts.KeywordTypeNode;
  LiteralType: ts.LiteralTypeNode;
  MappedTypeNode: ts.MappedTypeNode;
  MaybeOptional: {
    // root types
    questionToken?: NexusGenRootTypes["Token"] | null; // Token
  };
  MethodDeclaration: ts.MethodDeclaration;
  MissingDeclaration: ts.MissingDeclaration;
  ModuleDeclaration: ts.ModuleDeclaration;
  NamespaceDeclaration: ts.NamespaceDeclaration;
  NamespaceExportDeclaration: ts.NamespaceExportDeclaration;
  Node: ts.Node;
  NumericLiteral: ts.NumericLiteral;
  OptionalTypeNode: ts.OptionalTypeNode;
  ParameterDeclaration: ts.ParameterDeclaration;
  ParenthesizedType: ts.ParenthesizedTypeNode;
  PropertyDeclaration: ts.PropertyDeclaration;
  PropertyLikeDeclaration: ts.PropertyLikeDeclaration;
  PropertySignature: ts.PropertySignature;
  QualifiedName: ts.QualifiedName;
  Query: {};
  RestTypeNode: ts.RestTypeNode;
  SetAccessorDeclaration: ts.SetAccessorDeclaration;
  SourceFile: ts.SourceFile;
  StringLiteral: ts.StringLiteral;
  StringLiteralLike: ts.StringLiteralLike;
  ThisTypeNode: ts.ThisTypeNode;
  Token: ts.Token<any>;
  TupleTypeNode: ts.TupleTypeNode;
  TypeAliasDeclaration: ts.TypeAliasDeclaration;
  TypeLiteral: ts.TypeLiteralNode;
  TypeParameterDeclaration: ts.TypeParameterDeclaration;
  TypeReference: ts.TypeReferenceNode;
  UNKNOWN_NODE: {
    // root types
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers?: NexusGenRootTypes["Token"][] | null; // [Token!]
    name?: null; // DeclarationName
    nameText?: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName?: null; // DeclarationName
  };
  UnionType: ts.UnionTypeNode;
  UnnamedNode: {
    // root types
    text?: string | null; // String
  };
  VariableDeclaration: ts.VariableDeclaration;
}

export interface NexusGenReturnTypes {
  ArrayTypeNode: {
    // return type
    elementType: undefined | null; // Node!
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  BindingPattern: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  CallSignatureDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ClassDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    members: Array<undefined | null>; // [Node!]!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ComputedPropertyName: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ConditionalTypeNode: {
    // return type
    checkType: undefined | null; // Node!
    end: number; // Int!
    extendsType: undefined | null; // Node!
    falseType: undefined | null; // Node!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    trueType: undefined | null; // Node!
    typeName: null; // DeclarationName
  };
  ConstructSignatureDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ConstructorDeclaration: {
    // return type
    asteriskToken: NexusGenRootTypes["Token"] | null; // Token
    end: number; // Int!
    exclamationToken: NexusGenRootTypes["Token"] | null; // Token
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parameters: NexusGenRootTypes["ParameterDeclaration"][]; // [ParameterDeclaration!]!
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
    typeParameters: NexusGenRootTypes["TypeParameterDeclaration"][] | null; // [TypeParameterDeclaration!]
  };
  ConstructorTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: undefined | null; // Node!
    typeName: null; // DeclarationName
  };
  EnumDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    members: Array<undefined | null>; // [Node!]!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ExportAssignment: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ExportDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  FunctionDeclaration: {
    // return type
    asteriskToken: NexusGenRootTypes["Token"] | null; // Token
    end: number; // Int!
    exclamationToken: NexusGenRootTypes["Token"] | null; // Token
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parameters: NexusGenRootTypes["ParameterDeclaration"][]; // [ParameterDeclaration!]!
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
    typeParameters: NexusGenRootTypes["TypeParameterDeclaration"][] | null; // [TypeParameterDeclaration!]
  };
  FunctionTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: undefined | null; // Node!
    typeName: null; // DeclarationName
  };
  GetAccessorDeclaration: {
    // return type
    asteriskToken: NexusGenRootTypes["Token"] | null; // Token
    end: number; // Int!
    exclamationToken: NexusGenRootTypes["Token"] | null; // Token
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parameters: NexusGenRootTypes["ParameterDeclaration"][]; // [ParameterDeclaration!]!
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
    typeParameters: NexusGenRootTypes["TypeParameterDeclaration"][] | null; // [TypeParameterDeclaration!]
  };
  HasJSDoc: {
    // return type
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
  };
  Identifier: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    text: string; // String!
    typeName: null; // DeclarationName
  };
  ImportDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ImportEqualsDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ImportTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  IndexSignatureDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  IndexedAccessTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  InferTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
    typeParameter: undefined | null; // Node!
  };
  InterfaceDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  IntersectionTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
    types: Array<undefined | null>; // [Node!]!
  };
  JSDoc: {
    // return type
    comment: string | null; // String
    tags: Array<undefined | null> | null; // [JSDocTag!]
  };
  JSDocAugmentsTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocClassTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocEnumTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocNamespaceDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  JSDocReturnTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocTemplateTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocThisTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocTypeTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  JSDocUnknownTag: {
    // return type
    comment: string | null; // String
    tagName: string | null; // String
  };
  KeywordTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  LiteralType: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  MappedTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  MaybeOptional: {
    // return type
    questionToken: NexusGenRootTypes["Token"] | null; // Token
  };
  MethodDeclaration: {
    // return type
    asteriskToken: NexusGenRootTypes["Token"] | null; // Token
    end: number; // Int!
    exclamationToken: NexusGenRootTypes["Token"] | null; // Token
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parameters: NexusGenRootTypes["ParameterDeclaration"][]; // [ParameterDeclaration!]!
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
    typeParameters: NexusGenRootTypes["TypeParameterDeclaration"][] | null; // [TypeParameterDeclaration!]
  };
  MissingDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ModuleDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  NamespaceDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  NamespaceExportDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  Node: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  NumericLiteral: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  OptionalTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: undefined | null; // Node!
    typeName: null; // DeclarationName
  };
  ParameterDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
  };
  ParenthesizedType: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: undefined | null; // Node!
    typeName: null; // DeclarationName
  };
  PropertyDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  PropertyLikeDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  PropertySignature: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
  };
  QualifiedName: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  Query: {
    // return type
    parseFile: NexusGenRootTypes["SourceFile"]; // SourceFile!
  };
  RestTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: undefined | null; // Node!
    typeName: null; // DeclarationName
  };
  SetAccessorDeclaration: {
    // return type
    asteriskToken: NexusGenRootTypes["Token"] | null; // Token
    end: number; // Int!
    exclamationToken: NexusGenRootTypes["Token"] | null; // Token
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parameters: NexusGenRootTypes["ParameterDeclaration"][]; // [ParameterDeclaration!]!
    parent: undefined | null; // Node!
    pos: number; // Int!
    questionToken: NexusGenRootTypes["Token"] | null; // Token
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
    typeParameters: NexusGenRootTypes["TypeParameterDeclaration"][] | null; // [TypeParameterDeclaration!]
  };
  SourceFile: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    statements: Array<undefined | null>; // [Node!]!
    typeName: null; // DeclarationName
  };
  StringLiteral: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  StringLiteralLike: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  ThisTypeNode: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  Token: {
    // return type
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
  };
  TupleTypeNode: {
    // return type
    elementTypes: Array<undefined | null>; // [Node!]!
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  TypeAliasDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    jsDoc: NexusGenRootTypes["JSDoc"][] | null; // [JSDoc!]
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    type: null; // Node
    typeName: null; // DeclarationName
    typeParameters: NexusGenRootTypes["TypeParameterDeclaration"][] | null; // [TypeParameterDeclaration!]
  };
  TypeLiteral: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  TypeParameterDeclaration: {
    // return type
    constraint: undefined | null; // Node!
    default: undefined | null; // Node!
    end: number; // Int!
    expression: undefined | null; // Node!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  TypeReference: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    text: string | null; // String
    typeArguments: Array<undefined | null> | null; // [Node!]
    typeName: null; // DeclarationName
  };
  UNKNOWN_NODE: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
  UnionType: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
    types: Array<undefined | null>; // [Node!]!
  };
  UnnamedNode: {
    // return type
    text: string | null; // String
  };
  VariableDeclaration: {
    // return type
    end: number; // Int!
    flags: NexusGenEnums["NodeFlags"]; // NodeFlags!
    kind: NexusGenEnums["SyntaxKind"]; // SyntaxKind!
    kindCode: number; // Int!
    modifiers: NexusGenRootTypes["Token"][] | null; // [Token!]
    name: null; // DeclarationName
    nameText: string | null; // String
    parent: undefined | null; // Node!
    pos: number; // Int!
    rawText: string; // String!
    typeName: null; // DeclarationName
  };
}

export interface NexusGenArgTypes {
  ArrayTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  BindingPattern: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  CallSignatureDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ClassDeclaration: {
    members: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ComputedPropertyName: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ConditionalTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ConstructSignatureDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ConstructorDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ConstructorTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  EnumDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ExportAssignment: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ExportDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  FunctionDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  FunctionTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  GetAccessorDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  Identifier: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ImportDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ImportEqualsDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ImportTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  IndexSignatureDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  IndexedAccessTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  InferTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  InterfaceDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  IntersectionTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  JSDocNamespaceDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  KeywordTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  LiteralType: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  MappedTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  MethodDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  MissingDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ModuleDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  NamespaceDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  NamespaceExportDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  Node: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  NumericLiteral: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  OptionalTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ParameterDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ParenthesizedType: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  PropertyDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  PropertyLikeDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  PropertySignature: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  QualifiedName: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  Query: {
    parseFile: {
      // args
      file: string; // String!
    };
  };
  RestTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  SetAccessorDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  SourceFile: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    statements: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  StringLiteral: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  StringLiteralLike: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  ThisTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  TupleTypeNode: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  TypeAliasDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  TypeLiteral: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  TypeParameterDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  TypeReference: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  UNKNOWN_NODE: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  UnionType: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
  VariableDeclaration: {
    modifiers: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
    rawText: {
      // args
      only?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
      skip?: NexusGenEnums["SyntaxKind"][] | null; // [SyntaxKind!]
    };
  };
}

interface NexusGenAbstractResolveSourceTypes {
  DeclarationName:
    | NexusGenRootTypes["BindingPattern"]
    | NexusGenRootTypes["ComputedPropertyName"]
    | NexusGenRootTypes["Identifier"]
    | NexusGenRootTypes["NumericLiteral"]
    | NexusGenRootTypes["QualifiedName"]
    | NexusGenRootTypes["StringLiteralLike"]
    | NexusGenRootTypes["UnnamedNode"];
  HasJSDoc:
    | NexusGenRootTypes["ClassDeclaration"]
    | NexusGenRootTypes["ConstructorDeclaration"]
    | NexusGenRootTypes["ParameterDeclaration"]
    | NexusGenRootTypes["EnumDeclaration"]
    | NexusGenRootTypes["FunctionDeclaration"]
    | NexusGenRootTypes["GetAccessorDeclaration"]
    | NexusGenRootTypes["IndexSignatureDeclaration"]
    | NexusGenRootTypes["InterfaceDeclaration"]
    | NexusGenRootTypes["MethodDeclaration"]
    | NexusGenRootTypes["ModuleDeclaration"]
    | NexusGenRootTypes["NamespaceDeclaration"]
    | NexusGenRootTypes["PropertyDeclaration"]
    | NexusGenRootTypes["PropertySignature"]
    | NexusGenRootTypes["SetAccessorDeclaration"]
    | NexusGenRootTypes["TypeAliasDeclaration"];
  JSDocTag:
    | NexusGenRootTypes["JSDocAugmentsTag"]
    | NexusGenRootTypes["JSDocClassTag"]
    | NexusGenRootTypes["JSDocEnumTag"]
    | NexusGenRootTypes["JSDocReturnTag"]
    | NexusGenRootTypes["JSDocTemplateTag"]
    | NexusGenRootTypes["JSDocThisTag"]
    | NexusGenRootTypes["JSDocTypeTag"]
    | NexusGenRootTypes["JSDocUnknownTag"];
  MaybeOptional:
    | NexusGenRootTypes["ConstructorDeclaration"]
    | NexusGenRootTypes["FunctionDeclaration"]
    | NexusGenRootTypes["GetAccessorDeclaration"]
    | NexusGenRootTypes["MethodDeclaration"]
    | NexusGenRootTypes["PropertyDeclaration"]
    | NexusGenRootTypes["PropertySignature"]
    | NexusGenRootTypes["SetAccessorDeclaration"];
  Node:
    | NexusGenRootTypes["SourceFile"]
    | NexusGenRootTypes["BindingPattern"]
    | NexusGenRootTypes["ComputedPropertyName"]
    | NexusGenRootTypes["Identifier"]
    | NexusGenRootTypes["NumericLiteral"]
    | NexusGenRootTypes["QualifiedName"]
    | NexusGenRootTypes["StringLiteralLike"]
    | NexusGenRootTypes["ArrayTypeNode"]
    | NexusGenRootTypes["CallSignatureDeclaration"]
    | NexusGenRootTypes["ClassDeclaration"]
    | NexusGenRootTypes["ConditionalTypeNode"]
    | NexusGenRootTypes["ConstructorDeclaration"]
    | NexusGenRootTypes["ParameterDeclaration"]
    | NexusGenRootTypes["TypeParameterDeclaration"]
    | NexusGenRootTypes["ConstructorTypeNode"]
    | NexusGenRootTypes["ConstructSignatureDeclaration"]
    | NexusGenRootTypes["EnumDeclaration"]
    | NexusGenRootTypes["ExportAssignment"]
    | NexusGenRootTypes["ExportDeclaration"]
    | NexusGenRootTypes["FunctionDeclaration"]
    | NexusGenRootTypes["FunctionTypeNode"]
    | NexusGenRootTypes["GetAccessorDeclaration"]
    | NexusGenRootTypes["ImportDeclaration"]
    | NexusGenRootTypes["ImportEqualsDeclaration"]
    | NexusGenRootTypes["ImportTypeNode"]
    | NexusGenRootTypes["IndexedAccessTypeNode"]
    | NexusGenRootTypes["IndexSignatureDeclaration"]
    | NexusGenRootTypes["InferTypeNode"]
    | NexusGenRootTypes["InterfaceDeclaration"]
    | NexusGenRootTypes["IntersectionTypeNode"]
    | NexusGenRootTypes["JSDocNamespaceDeclaration"]
    | NexusGenRootTypes["KeywordTypeNode"]
    | NexusGenRootTypes["LiteralType"]
    | NexusGenRootTypes["MappedTypeNode"]
    | NexusGenRootTypes["MethodDeclaration"]
    | NexusGenRootTypes["MissingDeclaration"]
    | NexusGenRootTypes["ModuleDeclaration"]
    | NexusGenRootTypes["NamespaceDeclaration"]
    | NexusGenRootTypes["NamespaceExportDeclaration"]
    | NexusGenRootTypes["OptionalTypeNode"]
    | NexusGenRootTypes["ParenthesizedType"]
    | NexusGenRootTypes["PropertyDeclaration"]
    | NexusGenRootTypes["PropertyLikeDeclaration"]
    | NexusGenRootTypes["PropertySignature"]
    | NexusGenRootTypes["RestTypeNode"]
    | NexusGenRootTypes["SetAccessorDeclaration"]
    | NexusGenRootTypes["StringLiteral"]
    | NexusGenRootTypes["ThisTypeNode"]
    | NexusGenRootTypes["TupleTypeNode"]
    | NexusGenRootTypes["TypeAliasDeclaration"]
    | NexusGenRootTypes["TypeLiteral"]
    | NexusGenRootTypes["TypeReference"]
    | NexusGenRootTypes["UnionType"]
    | NexusGenRootTypes["UNKNOWN_NODE"]
    | NexusGenRootTypes["VariableDeclaration"];
}

interface NexusGenAbstractResolveReturnTypes {
  DeclarationName:
    | "BindingPattern"
    | "ComputedPropertyName"
    | "Identifier"
    | "NumericLiteral"
    | "QualifiedName"
    | "StringLiteralLike"
    | "UnnamedNode";
  HasJSDoc:
    | "ClassDeclaration"
    | "ConstructorDeclaration"
    | "ParameterDeclaration"
    | "EnumDeclaration"
    | "FunctionDeclaration"
    | "GetAccessorDeclaration"
    | "IndexSignatureDeclaration"
    | "InterfaceDeclaration"
    | "MethodDeclaration"
    | "ModuleDeclaration"
    | "NamespaceDeclaration"
    | "PropertyDeclaration"
    | "PropertySignature"
    | "SetAccessorDeclaration"
    | "TypeAliasDeclaration";
  JSDocTag:
    | "JSDocAugmentsTag"
    | "JSDocClassTag"
    | "JSDocEnumTag"
    | "JSDocReturnTag"
    | "JSDocTemplateTag"
    | "JSDocThisTag"
    | "JSDocTypeTag"
    | "JSDocUnknownTag";
  MaybeOptional:
    | "ConstructorDeclaration"
    | "FunctionDeclaration"
    | "GetAccessorDeclaration"
    | "MethodDeclaration"
    | "PropertyDeclaration"
    | "PropertySignature"
    | "SetAccessorDeclaration";
  Node:
    | "SourceFile"
    | "BindingPattern"
    | "ComputedPropertyName"
    | "Identifier"
    | "NumericLiteral"
    | "QualifiedName"
    | "StringLiteralLike"
    | "ArrayTypeNode"
    | "CallSignatureDeclaration"
    | "ClassDeclaration"
    | "ConditionalTypeNode"
    | "ConstructorDeclaration"
    | "ParameterDeclaration"
    | "TypeParameterDeclaration"
    | "ConstructorTypeNode"
    | "ConstructSignatureDeclaration"
    | "EnumDeclaration"
    | "ExportAssignment"
    | "ExportDeclaration"
    | "FunctionDeclaration"
    | "FunctionTypeNode"
    | "GetAccessorDeclaration"
    | "ImportDeclaration"
    | "ImportEqualsDeclaration"
    | "ImportTypeNode"
    | "IndexedAccessTypeNode"
    | "IndexSignatureDeclaration"
    | "InferTypeNode"
    | "InterfaceDeclaration"
    | "IntersectionTypeNode"
    | "JSDocNamespaceDeclaration"
    | "KeywordTypeNode"
    | "LiteralType"
    | "MappedTypeNode"
    | "MethodDeclaration"
    | "MissingDeclaration"
    | "ModuleDeclaration"
    | "NamespaceDeclaration"
    | "NamespaceExportDeclaration"
    | "OptionalTypeNode"
    | "ParenthesizedType"
    | "PropertyDeclaration"
    | "PropertyLikeDeclaration"
    | "PropertySignature"
    | "RestTypeNode"
    | "SetAccessorDeclaration"
    | "StringLiteral"
    | "ThisTypeNode"
    | "TupleTypeNode"
    | "TypeAliasDeclaration"
    | "TypeLiteral"
    | "TypeReference"
    | "UnionType"
    | "UNKNOWN_NODE"
    | "VariableDeclaration";
}

export type NexusGenObjectNames =
  | "ArrayTypeNode"
  | "BindingPattern"
  | "CallSignatureDeclaration"
  | "ClassDeclaration"
  | "ComputedPropertyName"
  | "ConditionalTypeNode"
  | "ConstructSignatureDeclaration"
  | "ConstructorDeclaration"
  | "ConstructorTypeNode"
  | "EnumDeclaration"
  | "ExportAssignment"
  | "ExportDeclaration"
  | "FunctionDeclaration"
  | "FunctionTypeNode"
  | "GetAccessorDeclaration"
  | "Identifier"
  | "ImportDeclaration"
  | "ImportEqualsDeclaration"
  | "ImportTypeNode"
  | "IndexSignatureDeclaration"
  | "IndexedAccessTypeNode"
  | "InferTypeNode"
  | "InterfaceDeclaration"
  | "IntersectionTypeNode"
  | "JSDoc"
  | "JSDocAugmentsTag"
  | "JSDocClassTag"
  | "JSDocEnumTag"
  | "JSDocNamespaceDeclaration"
  | "JSDocReturnTag"
  | "JSDocTemplateTag"
  | "JSDocThisTag"
  | "JSDocTypeTag"
  | "JSDocUnknownTag"
  | "KeywordTypeNode"
  | "LiteralType"
  | "MappedTypeNode"
  | "MethodDeclaration"
  | "MissingDeclaration"
  | "ModuleDeclaration"
  | "NamespaceDeclaration"
  | "NamespaceExportDeclaration"
  | "NumericLiteral"
  | "OptionalTypeNode"
  | "ParameterDeclaration"
  | "ParenthesizedType"
  | "PropertyDeclaration"
  | "PropertyLikeDeclaration"
  | "PropertySignature"
  | "QualifiedName"
  | "Query"
  | "RestTypeNode"
  | "SetAccessorDeclaration"
  | "SourceFile"
  | "StringLiteral"
  | "StringLiteralLike"
  | "ThisTypeNode"
  | "Token"
  | "TupleTypeNode"
  | "TypeAliasDeclaration"
  | "TypeLiteral"
  | "TypeParameterDeclaration"
  | "TypeReference"
  | "UNKNOWN_NODE"
  | "UnionType"
  | "UnnamedNode"
  | "VariableDeclaration";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "NodeFlags" | "SyntaxKind";

export type NexusGenInterfaceNames =
  | "HasJSDoc"
  | "JSDocTag"
  | "MaybeOptional"
  | "Node";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = "DeclarationName";

export interface NexusGenTypes {
  context: t.ContextType;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  returnTypes: NexusGenReturnTypes;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["enumNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveRoot: NexusGenAbstractResolveSourceTypes;
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

export type Gen = NexusGenTypes;

type MaybePromise<T> = PromiseLike<T> | T;
type SourceType<
  TypeName
> = TypeName extends keyof NexusGenAbstractResolveSourceTypes
  ? NexusGenAbstractResolveSourceTypes[TypeName]
  : never;
type RootType<TypeName> = TypeName extends keyof NexusGenRootTypes
  ? NexusGenRootTypes[TypeName]
  : never;
type ArgType<TypeName, FieldName> = TypeName extends keyof NexusGenArgTypes
  ? FieldName extends keyof NexusGenArgTypes[TypeName]
    ? NexusGenArgTypes[TypeName][FieldName]
    : {}
  : {};

export type NexusResolver<
  TypeName extends keyof NexusGenReturnTypes,
  FieldName extends keyof NexusGenReturnTypes[TypeName]
> = (
  root: RootType<TypeName>,
  args: ArgType<TypeName, FieldName>,
  context: NexusGenTypes["context"],
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenReturnTypes[TypeName][FieldName]>;

export type NexusAbstractTypeResolver<
  TypeName extends keyof NexusGenAbstractResolveReturnTypes
> = (
  root: SourceType<TypeName>,
  context: NexusGenTypes["context"],
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenAbstractResolveReturnTypes[TypeName]>;
