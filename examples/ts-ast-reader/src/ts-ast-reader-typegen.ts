/**
 * This file is automatically generated by GraphQLiteral
 * Do not make changes to this file directly
 * 
 * For better typings, you should provide configuration for how to lookup 
 * the types. See the documentation for "typegenAutoConfig"
 */
import * as t from "./types/index"
import ts from "typescript"

declare global {
  interface GraphQLiteralGen extends GraphQLiteralGenTypes {}
}

// Maybe Promise
type MaybePromise<T> = T | PromiseLike<T>;

// Maybe Promise List
type MaybePromiseList<T> = Array<MaybePromise<T>>;

// Maybe Thunk
type MaybeThunk<T> = T | (() => T);

// Maybe Thunk, with args
type MaybeThunkArgs<T, A> = T | ((args?: A) => T);

export type QueryParseFileReturnType = SourceFileReturnType;

export interface QueryParseFileArgs {
  file: string;
}

export type QueryRootType = {};

export type QueryReturnType = {};

export type SourceFileEndReturnType = number;

export type SourceFileFlagsReturnType = NodeFlags;

export type SourceFileKindReturnType = SyntaxKind;

export type SourceFileKindCodeReturnType = number;

export type SourceFileModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type SourceFileParentReturnType = NodeReturnType;

export type SourceFilePosReturnType = number;

export type SourceFileRawTextReturnType = string;

export interface SourceFileRawTextArgs extends NodeRawTextArgs {}

export type SourceFileStatementsReturnType = MaybePromiseList<NodeReturnType>;

export type SourceFileRootType = ts.SourceFile;

export type SourceFileReturnType = ts.SourceFile

export type NodeEndReturnType = number;

export type NodeFlagsReturnType = NodeFlags;

export type NodeKindReturnType = SyntaxKind;

export type NodeKindCodeReturnType = number;

export type NodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NodeParentReturnType = NodeReturnType;

export type NodePosReturnType = number;

export type NodeRawTextReturnType = string;

export interface NodeRawTextArgs {
  skip?: Array<null | SyntaxKind>;
}

export type NodeFlags = 4194304 | 16384 | 3 | 2 | 64 | 12679168 | 8192 | 2048 | 32 | 512 | 262144 | 1024 | 256 | 128 | 8388608 | 65536 | 2097152 | 16777216 | 1 | 16 | 4 | 0 | 1572864 | 524288 | 1048576 | 1408 | 384 | 8 | 32768 | 131072 | 20480 | 4194816 | 4096;

export type SyntaxKind = 118 | 54 | 69 | 49 | 120 | 185 | 187 | 169 | 197 | 212 | 119 | 63 | 41 | 62 | 40 | 121 | 58 | 201 | 122 | 55 | 70 | 50 | 146 | 9 | 204 | 186 | 218 | 123 | 73 | 229 | 280 | 191 | 160 | 71 | 51 | 246 | 271 | 74 | 274 | 75 | 240 | 209 | 76 | 19 | 23 | 21 | 57 | 309 | 27 | 149 | 205 | 175 | 7 | 77 | 157 | 124 | 166 | 161 | 78 | 228 | 312 | 79 | 236 | 125 | 152 | 272 | 80 | 198 | 81 | 82 | 223 | 25 | 24 | 190 | 83 | 220 | 311 | 1 | 243 | 84 | 278 | 35 | 33 | 37 | 59 | 36 | 34 | 52 | 254 | 255 | 85 | 257 | 221 | 211 | 86 | 259 | 87 | 88 | 59 | 28 | 60 | 118 | 109 | 283 | 294 | 73 | 8 | 148 | 18 | 73 | 14 | 0 | 2 | 163 | 226 | 89 | 227 | 225 | 144 | 239 | 196 | 90 | 165 | 158 | 126 | 145 | 32 | 67 | 68 | 48 | 47 | 30 | 273 | 72 | 91 | 222 | 109 | 250 | 249 | 248 | 92 | 253 | 183 | 180 | 162 | 127 | 176 | 93 | 282 | 94 | 241 | 110 | 174 | 128 | 284 | 295 | 297 | 296 | 291 | 298 | 289 | 287 | 286 | 288 | 299 | 305 | 300 | 293 | 294 | 303 | 301 | 304 | 283 | 292 | 302 | 285 | 290 | 267 | 268 | 263 | 266 | 260 | 270 | 264 | 262 | 265 | 261 | 269 | 11 | 12 | 129 | 233 | 71 | 71 | 71 | 147 | 117 | 305 | 305 | 147 | 14 | 71 | 108 | 17 | 147 | 7 | 183 | 31 | 66 | 46 | 29 | 28 | 111 | 182 | 181 | 310 | 214 | 156 | 155 | 61 | 45 | 39 | 258 | 245 | 244 | 130 | 3 | 256 | 252 | 247 | 251 | 131 | 132 | 192 | 95 | 4 | 213 | 14 | 307 | 96 | 135 | 8 | 184 | 136 | 188 | 147 | 210 | 18 | 22 | 20 | 171 | 112 | 151 | 195 | 177 | 308 | 65 | 43 | 60 | 44 | 38 | 203 | 202 | 113 | 189 | 275 | 154 | 153 | 114 | 115 | 148 | 56 | 133 | 13 | 134 | 172 | 97 | 230 | 217 | 26 | 159 | 137 | 6 | 276 | 2 | 64 | 42 | 279 | 277 | 208 | 116 | 138 | 10 | 98 | 99 | 232 | 139 | 306 | 215 | 193 | 206 | 15 | 16 | 216 | 17 | 100 | 178 | 101 | 234 | 53 | 102 | 103 | 235 | 170 | 242 | 194 | 140 | 168 | 199 | 104 | 179 | 150 | 163 | 167 | 164 | 141 | 173 | 142 | 0 | 143 | 281 | 237 | 238 | 219 | 105 | 200 | 106 | 107 | 224 | 5 | 108 | 231 | 207 | 117;

export type TokenKindReturnType = SyntaxKind;

export type TokenRootType = ts.Token<any>;

export type TokenReturnType = ts.Token<any>

export type ArrayTypeNodeEndReturnType = number;

export type ArrayTypeNodeFlagsReturnType = NodeFlags;

export type ArrayTypeNodeKindReturnType = SyntaxKind;

export type ArrayTypeNodeKindCodeReturnType = number;

export type ArrayTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ArrayTypeNodeParentReturnType = NodeReturnType;

export type ArrayTypeNodePosReturnType = number;

export type ArrayTypeNodeRawTextReturnType = string;

export interface ArrayTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ArrayTypeNodeRootType = ts.ArrayTypeNode;

export type ArrayTypeNodeReturnType = ts.ArrayTypeNode

export type CallSignatureDeclarationEndReturnType = number;

export type CallSignatureDeclarationFlagsReturnType = NodeFlags;

export type CallSignatureDeclarationKindReturnType = SyntaxKind;

export type CallSignatureDeclarationKindCodeReturnType = number;

export type CallSignatureDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type CallSignatureDeclarationParentReturnType = NodeReturnType;

export type CallSignatureDeclarationPosReturnType = number;

export type CallSignatureDeclarationRawTextReturnType = string;

export interface CallSignatureDeclarationRawTextArgs extends NodeRawTextArgs {}

export type CallSignatureDeclarationRootType = ts.CallSignatureDeclaration;

export type CallSignatureDeclarationReturnType = ts.CallSignatureDeclaration

export type ClassDeclarationEndReturnType = number;

export type ClassDeclarationFlagsReturnType = NodeFlags;

export type ClassDeclarationKindReturnType = SyntaxKind;

export type ClassDeclarationKindCodeReturnType = number;

export type ClassDeclarationMembersReturnType = MaybePromiseList<NodeReturnType>;

export type ClassDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ClassDeclarationNameTextReturnType = null | string;

export type ClassDeclarationParentReturnType = NodeReturnType;

export type ClassDeclarationPosReturnType = number;

export type ClassDeclarationRawTextReturnType = string;

export interface ClassDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ClassDeclarationRootType = ts.ClassDeclaration;

export type ClassDeclarationReturnType = ts.ClassDeclaration

export type ComputedPropertyNameEndReturnType = number;

export type ComputedPropertyNameFlagsReturnType = NodeFlags;

export type ComputedPropertyNameKindReturnType = SyntaxKind;

export type ComputedPropertyNameKindCodeReturnType = number;

export type ComputedPropertyNameModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ComputedPropertyNameParentReturnType = NodeReturnType;

export type ComputedPropertyNamePosReturnType = number;

export type ComputedPropertyNameRawTextReturnType = string;

export interface ComputedPropertyNameRawTextArgs extends NodeRawTextArgs {}

export type ComputedPropertyNameRootType = ts.ComputedPropertyName;

export type ComputedPropertyNameReturnType = ts.ComputedPropertyName

export type ConditionalTypeNodeEndReturnType = number;

export type ConditionalTypeNodeFlagsReturnType = NodeFlags;

export type ConditionalTypeNodeKindReturnType = SyntaxKind;

export type ConditionalTypeNodeKindCodeReturnType = number;

export type ConditionalTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ConditionalTypeNodeParentReturnType = NodeReturnType;

export type ConditionalTypeNodePosReturnType = number;

export type ConditionalTypeNodeRawTextReturnType = string;

export interface ConditionalTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ConditionalTypeNodeRootType = ts.ConditionalTypeNode;

export type ConditionalTypeNodeReturnType = ts.ConditionalTypeNode

export type ConstructorDeclarationAsteriskTokenReturnType = null | TokenReturnType;

export type ConstructorDeclarationEndReturnType = number;

export type ConstructorDeclarationExclamationTokenReturnType = null | TokenReturnType;

export type ConstructorDeclarationFlagsReturnType = NodeFlags;

export type ConstructorDeclarationKindReturnType = SyntaxKind;

export type ConstructorDeclarationKindCodeReturnType = number;

export type ConstructorDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ConstructorDeclarationNameTextReturnType = null | string;

export type ConstructorDeclarationParametersReturnType = MaybePromiseList<ParameterDeclarationReturnType>;

export type ConstructorDeclarationParentReturnType = NodeReturnType;

export type ConstructorDeclarationPosReturnType = number;

export type ConstructorDeclarationQuestionTokenReturnType = null | TokenReturnType;

export type ConstructorDeclarationRawTextReturnType = string;

export interface ConstructorDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ConstructorDeclarationTypeReturnType = null | NodeReturnType;

export type ConstructorDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclarationReturnType>;

export type ConstructorDeclarationRootType = ts.ConstructorDeclaration;

export type ConstructorDeclarationReturnType = ts.ConstructorDeclaration

export type ParameterDeclarationEndReturnType = number;

export type ParameterDeclarationFlagsReturnType = NodeFlags;

export type ParameterDeclarationKindReturnType = SyntaxKind;

export type ParameterDeclarationKindCodeReturnType = number;

export type ParameterDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ParameterDeclarationNameTextReturnType = null | string;

export type ParameterDeclarationParentReturnType = NodeReturnType;

export type ParameterDeclarationPosReturnType = number;

export type ParameterDeclarationRawTextReturnType = string;

export interface ParameterDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ParameterDeclarationTypeReturnType = null | NodeReturnType;

export type ParameterDeclarationRootType = ts.ParameterDeclaration;

export type ParameterDeclarationReturnType = ts.ParameterDeclaration

export type TypeParameterDeclarationEndReturnType = number;

export type TypeParameterDeclarationFlagsReturnType = NodeFlags;

export type TypeParameterDeclarationKindReturnType = SyntaxKind;

export type TypeParameterDeclarationKindCodeReturnType = number;

export type TypeParameterDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type TypeParameterDeclarationParentReturnType = NodeReturnType;

export type TypeParameterDeclarationPosReturnType = number;

export type TypeParameterDeclarationRawTextReturnType = string;

export interface TypeParameterDeclarationRawTextArgs extends NodeRawTextArgs {}

export type TypeParameterDeclarationRootType = ts.TypeParameterDeclaration;

export type TypeParameterDeclarationReturnType = ts.TypeParameterDeclaration

export type ConstructorTypeNodeEndReturnType = number;

export type ConstructorTypeNodeFlagsReturnType = NodeFlags;

export type ConstructorTypeNodeKindReturnType = SyntaxKind;

export type ConstructorTypeNodeKindCodeReturnType = number;

export type ConstructorTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ConstructorTypeNodeParentReturnType = NodeReturnType;

export type ConstructorTypeNodePosReturnType = number;

export type ConstructorTypeNodeRawTextReturnType = string;

export interface ConstructorTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ConstructorTypeNodeRootType = ts.ConstructorTypeNode;

export type ConstructorTypeNodeReturnType = ts.ConstructorTypeNode

export type ConstructSignatureDeclarationEndReturnType = number;

export type ConstructSignatureDeclarationFlagsReturnType = NodeFlags;

export type ConstructSignatureDeclarationKindReturnType = SyntaxKind;

export type ConstructSignatureDeclarationKindCodeReturnType = number;

export type ConstructSignatureDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ConstructSignatureDeclarationParentReturnType = NodeReturnType;

export type ConstructSignatureDeclarationPosReturnType = number;

export type ConstructSignatureDeclarationRawTextReturnType = string;

export interface ConstructSignatureDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ConstructSignatureDeclarationRootType = ts.ConstructSignatureDeclaration;

export type ConstructSignatureDeclarationReturnType = ts.ConstructSignatureDeclaration

export type EnumDeclarationEndReturnType = number;

export type EnumDeclarationFlagsReturnType = NodeFlags;

export type EnumDeclarationKindReturnType = SyntaxKind;

export type EnumDeclarationKindCodeReturnType = number;

export type EnumDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type EnumDeclarationParentReturnType = NodeReturnType;

export type EnumDeclarationPosReturnType = number;

export type EnumDeclarationRawTextReturnType = string;

export interface EnumDeclarationRawTextArgs extends NodeRawTextArgs {}

export type EnumDeclarationRootType = ts.EnumDeclaration;

export type EnumDeclarationReturnType = ts.EnumDeclaration

export type ExportAssignmentEndReturnType = number;

export type ExportAssignmentFlagsReturnType = NodeFlags;

export type ExportAssignmentKindReturnType = SyntaxKind;

export type ExportAssignmentKindCodeReturnType = number;

export type ExportAssignmentModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ExportAssignmentParentReturnType = NodeReturnType;

export type ExportAssignmentPosReturnType = number;

export type ExportAssignmentRawTextReturnType = string;

export interface ExportAssignmentRawTextArgs extends NodeRawTextArgs {}

export type ExportAssignmentRootType = ts.ExportAssignment;

export type ExportAssignmentReturnType = ts.ExportAssignment

export type ExportDeclarationEndReturnType = number;

export type ExportDeclarationFlagsReturnType = NodeFlags;

export type ExportDeclarationKindReturnType = SyntaxKind;

export type ExportDeclarationKindCodeReturnType = number;

export type ExportDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ExportDeclarationParentReturnType = NodeReturnType;

export type ExportDeclarationPosReturnType = number;

export type ExportDeclarationRawTextReturnType = string;

export interface ExportDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ExportDeclarationRootType = ts.ExportDeclaration;

export type ExportDeclarationReturnType = ts.ExportDeclaration

export type FunctionDeclarationAsteriskTokenReturnType = null | TokenReturnType;

export type FunctionDeclarationEndReturnType = number;

export type FunctionDeclarationExclamationTokenReturnType = null | TokenReturnType;

export type FunctionDeclarationFlagsReturnType = NodeFlags;

export type FunctionDeclarationKindReturnType = SyntaxKind;

export type FunctionDeclarationKindCodeReturnType = number;

export type FunctionDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type FunctionDeclarationNameTextReturnType = null | string;

export type FunctionDeclarationParametersReturnType = MaybePromiseList<ParameterDeclarationReturnType>;

export type FunctionDeclarationParentReturnType = NodeReturnType;

export type FunctionDeclarationPosReturnType = number;

export type FunctionDeclarationQuestionTokenReturnType = null | TokenReturnType;

export type FunctionDeclarationRawTextReturnType = string;

export interface FunctionDeclarationRawTextArgs extends NodeRawTextArgs {}

export type FunctionDeclarationTypeReturnType = null | NodeReturnType;

export type FunctionDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclarationReturnType>;

export type FunctionDeclarationRootType = ts.FunctionDeclaration;

export type FunctionDeclarationReturnType = ts.FunctionDeclaration

export type FunctionTypeNodeEndReturnType = number;

export type FunctionTypeNodeFlagsReturnType = NodeFlags;

export type FunctionTypeNodeKindReturnType = SyntaxKind;

export type FunctionTypeNodeKindCodeReturnType = number;

export type FunctionTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type FunctionTypeNodeParentReturnType = NodeReturnType;

export type FunctionTypeNodePosReturnType = number;

export type FunctionTypeNodeRawTextReturnType = string;

export interface FunctionTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type FunctionTypeNodeRootType = ts.FunctionTypeNode;

export type FunctionTypeNodeReturnType = ts.FunctionTypeNode

export type GetAccessorDeclarationAsteriskTokenReturnType = null | TokenReturnType;

export type GetAccessorDeclarationEndReturnType = number;

export type GetAccessorDeclarationExclamationTokenReturnType = null | TokenReturnType;

export type GetAccessorDeclarationFlagsReturnType = NodeFlags;

export type GetAccessorDeclarationKindReturnType = SyntaxKind;

export type GetAccessorDeclarationKindCodeReturnType = number;

export type GetAccessorDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type GetAccessorDeclarationNameTextReturnType = null | string;

export type GetAccessorDeclarationParametersReturnType = MaybePromiseList<ParameterDeclarationReturnType>;

export type GetAccessorDeclarationParentReturnType = NodeReturnType;

export type GetAccessorDeclarationPosReturnType = number;

export type GetAccessorDeclarationQuestionTokenReturnType = null | TokenReturnType;

export type GetAccessorDeclarationRawTextReturnType = string;

export interface GetAccessorDeclarationRawTextArgs extends NodeRawTextArgs {}

export type GetAccessorDeclarationTypeReturnType = null | NodeReturnType;

export type GetAccessorDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclarationReturnType>;

export type GetAccessorDeclarationRootType = ts.GetAccessorDeclaration;

export type GetAccessorDeclarationReturnType = ts.GetAccessorDeclaration

export type IdentifierEndReturnType = number;

export type IdentifierFlagsReturnType = NodeFlags;

export type IdentifierKindReturnType = SyntaxKind;

export type IdentifierKindCodeReturnType = number;

export type IdentifierModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type IdentifierParentReturnType = NodeReturnType;

export type IdentifierPosReturnType = number;

export type IdentifierRawTextReturnType = string;

export interface IdentifierRawTextArgs extends NodeRawTextArgs {}

export type IdentifierRootType = ts.Identifier;

export type IdentifierReturnType = ts.Identifier

export type ImportDeclarationEndReturnType = number;

export type ImportDeclarationFlagsReturnType = NodeFlags;

export type ImportDeclarationKindReturnType = SyntaxKind;

export type ImportDeclarationKindCodeReturnType = number;

export type ImportDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ImportDeclarationParentReturnType = NodeReturnType;

export type ImportDeclarationPosReturnType = number;

export type ImportDeclarationRawTextReturnType = string;

export interface ImportDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ImportDeclarationRootType = ts.ImportDeclaration;

export type ImportDeclarationReturnType = ts.ImportDeclaration

export type ImportEqualsDeclarationEndReturnType = number;

export type ImportEqualsDeclarationFlagsReturnType = NodeFlags;

export type ImportEqualsDeclarationKindReturnType = SyntaxKind;

export type ImportEqualsDeclarationKindCodeReturnType = number;

export type ImportEqualsDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ImportEqualsDeclarationParentReturnType = NodeReturnType;

export type ImportEqualsDeclarationPosReturnType = number;

export type ImportEqualsDeclarationRawTextReturnType = string;

export interface ImportEqualsDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ImportEqualsDeclarationRootType = ts.ImportEqualsDeclaration;

export type ImportEqualsDeclarationReturnType = ts.ImportEqualsDeclaration

export type ImportTypeNodeEndReturnType = number;

export type ImportTypeNodeFlagsReturnType = NodeFlags;

export type ImportTypeNodeKindReturnType = SyntaxKind;

export type ImportTypeNodeKindCodeReturnType = number;

export type ImportTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ImportTypeNodeParentReturnType = NodeReturnType;

export type ImportTypeNodePosReturnType = number;

export type ImportTypeNodeRawTextReturnType = string;

export interface ImportTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ImportTypeNodeRootType = ts.ImportTypeNode;

export type ImportTypeNodeReturnType = ts.ImportTypeNode

export type IndexedAccessTypeNodeEndReturnType = number;

export type IndexedAccessTypeNodeFlagsReturnType = NodeFlags;

export type IndexedAccessTypeNodeKindReturnType = SyntaxKind;

export type IndexedAccessTypeNodeKindCodeReturnType = number;

export type IndexedAccessTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type IndexedAccessTypeNodeParentReturnType = NodeReturnType;

export type IndexedAccessTypeNodePosReturnType = number;

export type IndexedAccessTypeNodeRawTextReturnType = string;

export interface IndexedAccessTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type IndexedAccessTypeNodeRootType = ts.IndexedAccessTypeNode;

export type IndexedAccessTypeNodeReturnType = ts.IndexedAccessTypeNode

export type IndexSignatureDeclarationEndReturnType = number;

export type IndexSignatureDeclarationFlagsReturnType = NodeFlags;

export type IndexSignatureDeclarationKindReturnType = SyntaxKind;

export type IndexSignatureDeclarationKindCodeReturnType = number;

export type IndexSignatureDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type IndexSignatureDeclarationParentReturnType = NodeReturnType;

export type IndexSignatureDeclarationPosReturnType = number;

export type IndexSignatureDeclarationRawTextReturnType = string;

export interface IndexSignatureDeclarationRawTextArgs extends NodeRawTextArgs {}

export type IndexSignatureDeclarationRootType = ts.IndexSignatureDeclaration;

export type IndexSignatureDeclarationReturnType = ts.IndexSignatureDeclaration

export type InferTypeNodeEndReturnType = number;

export type InferTypeNodeFlagsReturnType = NodeFlags;

export type InferTypeNodeKindReturnType = SyntaxKind;

export type InferTypeNodeKindCodeReturnType = number;

export type InferTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type InferTypeNodeParentReturnType = NodeReturnType;

export type InferTypeNodePosReturnType = number;

export type InferTypeNodeRawTextReturnType = string;

export interface InferTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type InferTypeNodeRootType = ts.InferTypeNode;

export type InferTypeNodeReturnType = ts.InferTypeNode

export type InterfaceDeclarationEndReturnType = number;

export type InterfaceDeclarationFlagsReturnType = NodeFlags;

export type InterfaceDeclarationKindReturnType = SyntaxKind;

export type InterfaceDeclarationKindCodeReturnType = number;

export type InterfaceDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type InterfaceDeclarationParentReturnType = NodeReturnType;

export type InterfaceDeclarationPosReturnType = number;

export type InterfaceDeclarationRawTextReturnType = string;

export interface InterfaceDeclarationRawTextArgs extends NodeRawTextArgs {}

export type InterfaceDeclarationRootType = ts.InterfaceDeclaration;

export type InterfaceDeclarationReturnType = ts.InterfaceDeclaration

export type IntersectionTypeNodeEndReturnType = number;

export type IntersectionTypeNodeFlagsReturnType = NodeFlags;

export type IntersectionTypeNodeKindReturnType = SyntaxKind;

export type IntersectionTypeNodeKindCodeReturnType = number;

export type IntersectionTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type IntersectionTypeNodeParentReturnType = NodeReturnType;

export type IntersectionTypeNodePosReturnType = number;

export type IntersectionTypeNodeRawTextReturnType = string;

export interface IntersectionTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type IntersectionTypeNodeRootType = ts.IntersectionTypeNode;

export type IntersectionTypeNodeReturnType = ts.IntersectionTypeNode

export type JSDocEndReturnType = number;

export type JSDocFlagsReturnType = NodeFlags;

export type JSDocKindReturnType = SyntaxKind;

export type JSDocKindCodeReturnType = number;

export type JSDocModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type JSDocParentReturnType = NodeReturnType;

export type JSDocPosReturnType = number;

export type JSDocRawTextReturnType = string;

export interface JSDocRawTextArgs extends NodeRawTextArgs {}

export type JSDocRootType = ts.JSDoc;

export type JSDocReturnType = ts.JSDoc

export type JSDocNamespaceDeclarationEndReturnType = number;

export type JSDocNamespaceDeclarationFlagsReturnType = NodeFlags;

export type JSDocNamespaceDeclarationKindReturnType = SyntaxKind;

export type JSDocNamespaceDeclarationKindCodeReturnType = number;

export type JSDocNamespaceDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type JSDocNamespaceDeclarationParentReturnType = NodeReturnType;

export type JSDocNamespaceDeclarationPosReturnType = number;

export type JSDocNamespaceDeclarationRawTextReturnType = string;

export interface JSDocNamespaceDeclarationRawTextArgs extends NodeRawTextArgs {}

export type JSDocNamespaceDeclarationRootType = ts.JSDocNamespaceDeclaration;

export type JSDocNamespaceDeclarationReturnType = ts.JSDocNamespaceDeclaration

export type KeywordTypeNodeEndReturnType = number;

export type KeywordTypeNodeFlagsReturnType = NodeFlags;

export type KeywordTypeNodeKindReturnType = SyntaxKind;

export type KeywordTypeNodeKindCodeReturnType = number;

export type KeywordTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type KeywordTypeNodeParentReturnType = NodeReturnType;

export type KeywordTypeNodePosReturnType = number;

export type KeywordTypeNodeRawTextReturnType = string;

export interface KeywordTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type KeywordTypeNodeRootType = ts.KeywordTypeNode;

export type KeywordTypeNodeReturnType = ts.KeywordTypeNode

export type LiteralTypeNodeEndReturnType = number;

export type LiteralTypeNodeFlagsReturnType = NodeFlags;

export type LiteralTypeNodeKindReturnType = SyntaxKind;

export type LiteralTypeNodeKindCodeReturnType = number;

export type LiteralTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type LiteralTypeNodeParentReturnType = NodeReturnType;

export type LiteralTypeNodePosReturnType = number;

export type LiteralTypeNodeRawTextReturnType = string;

export interface LiteralTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type LiteralTypeNodeRootType = ts.LiteralTypeNode;

export type LiteralTypeNodeReturnType = ts.LiteralTypeNode

export type MappedTypeNodeEndReturnType = number;

export type MappedTypeNodeFlagsReturnType = NodeFlags;

export type MappedTypeNodeKindReturnType = SyntaxKind;

export type MappedTypeNodeKindCodeReturnType = number;

export type MappedTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type MappedTypeNodeParentReturnType = NodeReturnType;

export type MappedTypeNodePosReturnType = number;

export type MappedTypeNodeRawTextReturnType = string;

export interface MappedTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type MappedTypeNodeRootType = ts.MappedTypeNode;

export type MappedTypeNodeReturnType = ts.MappedTypeNode

export type MethodDeclarationAsteriskTokenReturnType = null | TokenReturnType;

export type MethodDeclarationEndReturnType = number;

export type MethodDeclarationExclamationTokenReturnType = null | TokenReturnType;

export type MethodDeclarationFlagsReturnType = NodeFlags;

export type MethodDeclarationKindReturnType = SyntaxKind;

export type MethodDeclarationKindCodeReturnType = number;

export type MethodDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type MethodDeclarationNameTextReturnType = null | string;

export type MethodDeclarationParametersReturnType = MaybePromiseList<ParameterDeclarationReturnType>;

export type MethodDeclarationParentReturnType = NodeReturnType;

export type MethodDeclarationPosReturnType = number;

export type MethodDeclarationQuestionTokenReturnType = null | TokenReturnType;

export type MethodDeclarationRawTextReturnType = string;

export interface MethodDeclarationRawTextArgs extends NodeRawTextArgs {}

export type MethodDeclarationTypeReturnType = null | NodeReturnType;

export type MethodDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclarationReturnType>;

export type MethodDeclarationRootType = ts.MethodDeclaration;

export type MethodDeclarationReturnType = ts.MethodDeclaration

export type MissingDeclarationEndReturnType = number;

export type MissingDeclarationFlagsReturnType = NodeFlags;

export type MissingDeclarationKindReturnType = SyntaxKind;

export type MissingDeclarationKindCodeReturnType = number;

export type MissingDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type MissingDeclarationParentReturnType = NodeReturnType;

export type MissingDeclarationPosReturnType = number;

export type MissingDeclarationRawTextReturnType = string;

export interface MissingDeclarationRawTextArgs extends NodeRawTextArgs {}

export type MissingDeclarationRootType = ts.MissingDeclaration;

export type MissingDeclarationReturnType = ts.MissingDeclaration

export type ModuleDeclarationEndReturnType = number;

export type ModuleDeclarationFlagsReturnType = NodeFlags;

export type ModuleDeclarationKindReturnType = SyntaxKind;

export type ModuleDeclarationKindCodeReturnType = number;

export type ModuleDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ModuleDeclarationParentReturnType = NodeReturnType;

export type ModuleDeclarationPosReturnType = number;

export type ModuleDeclarationRawTextReturnType = string;

export interface ModuleDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ModuleDeclarationRootType = ts.ModuleDeclaration;

export type ModuleDeclarationReturnType = ts.ModuleDeclaration

export type NamedDeclarationEndReturnType = number;

export type NamedDeclarationFlagsReturnType = NodeFlags;

export type NamedDeclarationKindReturnType = SyntaxKind;

export type NamedDeclarationKindCodeReturnType = number;

export type NamedDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NamedDeclarationParentReturnType = NodeReturnType;

export type NamedDeclarationPosReturnType = number;

export type NamedDeclarationRawTextReturnType = string;

export interface NamedDeclarationRawTextArgs extends NodeRawTextArgs {}

export type NamedDeclarationRootType = ts.NamedDeclaration;

export type NamedDeclarationReturnType = ts.NamedDeclaration

export type NamespaceDeclarationEndReturnType = number;

export type NamespaceDeclarationFlagsReturnType = NodeFlags;

export type NamespaceDeclarationKindReturnType = SyntaxKind;

export type NamespaceDeclarationKindCodeReturnType = number;

export type NamespaceDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NamespaceDeclarationParentReturnType = NodeReturnType;

export type NamespaceDeclarationPosReturnType = number;

export type NamespaceDeclarationRawTextReturnType = string;

export interface NamespaceDeclarationRawTextArgs extends NodeRawTextArgs {}

export type NamespaceDeclarationRootType = ts.NamespaceDeclaration;

export type NamespaceDeclarationReturnType = ts.NamespaceDeclaration

export type NamespaceExportDeclarationEndReturnType = number;

export type NamespaceExportDeclarationFlagsReturnType = NodeFlags;

export type NamespaceExportDeclarationKindReturnType = SyntaxKind;

export type NamespaceExportDeclarationKindCodeReturnType = number;

export type NamespaceExportDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NamespaceExportDeclarationParentReturnType = NodeReturnType;

export type NamespaceExportDeclarationPosReturnType = number;

export type NamespaceExportDeclarationRawTextReturnType = string;

export interface NamespaceExportDeclarationRawTextArgs extends NodeRawTextArgs {}

export type NamespaceExportDeclarationRootType = ts.NamespaceExportDeclaration;

export type NamespaceExportDeclarationReturnType = ts.NamespaceExportDeclaration

export type NumericLiteralEndReturnType = number;

export type NumericLiteralFlagsReturnType = NodeFlags;

export type NumericLiteralKindReturnType = SyntaxKind;

export type NumericLiteralKindCodeReturnType = number;

export type NumericLiteralModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type NumericLiteralParentReturnType = NodeReturnType;

export type NumericLiteralPosReturnType = number;

export type NumericLiteralRawTextReturnType = string;

export interface NumericLiteralRawTextArgs extends NodeRawTextArgs {}

export type NumericLiteralRootType = ts.NumericLiteral;

export type NumericLiteralReturnType = ts.NumericLiteral

export type OptionalTypeNodeEndReturnType = number;

export type OptionalTypeNodeFlagsReturnType = NodeFlags;

export type OptionalTypeNodeKindReturnType = SyntaxKind;

export type OptionalTypeNodeKindCodeReturnType = number;

export type OptionalTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type OptionalTypeNodeParentReturnType = NodeReturnType;

export type OptionalTypeNodePosReturnType = number;

export type OptionalTypeNodeRawTextReturnType = string;

export interface OptionalTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type OptionalTypeNodeRootType = ts.OptionalTypeNode;

export type OptionalTypeNodeReturnType = ts.OptionalTypeNode

export type ParenthesizedTypeNodeEndReturnType = number;

export type ParenthesizedTypeNodeFlagsReturnType = NodeFlags;

export type ParenthesizedTypeNodeKindReturnType = SyntaxKind;

export type ParenthesizedTypeNodeKindCodeReturnType = number;

export type ParenthesizedTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ParenthesizedTypeNodeParentReturnType = NodeReturnType;

export type ParenthesizedTypeNodePosReturnType = number;

export type ParenthesizedTypeNodeRawTextReturnType = string;

export interface ParenthesizedTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ParenthesizedTypeNodeRootType = ts.ParenthesizedTypeNode;

export type ParenthesizedTypeNodeReturnType = ts.ParenthesizedTypeNode

export type PropertyDeclarationEndReturnType = number;

export type PropertyDeclarationFlagsReturnType = NodeFlags;

export type PropertyDeclarationKindReturnType = SyntaxKind;

export type PropertyDeclarationKindCodeReturnType = number;

export type PropertyDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type PropertyDeclarationParentReturnType = NodeReturnType;

export type PropertyDeclarationPosReturnType = number;

export type PropertyDeclarationRawTextReturnType = string;

export interface PropertyDeclarationRawTextArgs extends NodeRawTextArgs {}

export type PropertyDeclarationRootType = ts.PropertyDeclaration;

export type PropertyDeclarationReturnType = ts.PropertyDeclaration

export type PropertyLikeDeclarationEndReturnType = number;

export type PropertyLikeDeclarationFlagsReturnType = NodeFlags;

export type PropertyLikeDeclarationKindReturnType = SyntaxKind;

export type PropertyLikeDeclarationKindCodeReturnType = number;

export type PropertyLikeDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type PropertyLikeDeclarationParentReturnType = NodeReturnType;

export type PropertyLikeDeclarationPosReturnType = number;

export type PropertyLikeDeclarationRawTextReturnType = string;

export interface PropertyLikeDeclarationRawTextArgs extends NodeRawTextArgs {}

export type PropertyLikeDeclarationRootType = ts.PropertyLikeDeclaration;

export type PropertyLikeDeclarationReturnType = ts.PropertyLikeDeclaration

export type PropertyNameRootType = ComputedPropertyNameRootType | IdentifierRootType | NumericLiteralRootType | StringLiteralRootType;

export type PropertyNameReturnType = ComputedPropertyNameReturnType | IdentifierReturnType | NumericLiteralReturnType | StringLiteralReturnType;

export type StringLiteralEndReturnType = number;

export type StringLiteralFlagsReturnType = NodeFlags;

export type StringLiteralKindReturnType = SyntaxKind;

export type StringLiteralKindCodeReturnType = number;

export type StringLiteralModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type StringLiteralParentReturnType = NodeReturnType;

export type StringLiteralPosReturnType = number;

export type StringLiteralRawTextReturnType = string;

export interface StringLiteralRawTextArgs extends NodeRawTextArgs {}

export type StringLiteralRootType = ts.StringLiteral;

export type StringLiteralReturnType = ts.StringLiteral

export type RestTypeNodeEndReturnType = number;

export type RestTypeNodeFlagsReturnType = NodeFlags;

export type RestTypeNodeKindReturnType = SyntaxKind;

export type RestTypeNodeKindCodeReturnType = number;

export type RestTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type RestTypeNodeParentReturnType = NodeReturnType;

export type RestTypeNodePosReturnType = number;

export type RestTypeNodeRawTextReturnType = string;

export interface RestTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type RestTypeNodeRootType = ts.RestTypeNode;

export type RestTypeNodeReturnType = ts.RestTypeNode

export type SetAccessorDeclarationAsteriskTokenReturnType = null | TokenReturnType;

export type SetAccessorDeclarationEndReturnType = number;

export type SetAccessorDeclarationExclamationTokenReturnType = null | TokenReturnType;

export type SetAccessorDeclarationFlagsReturnType = NodeFlags;

export type SetAccessorDeclarationKindReturnType = SyntaxKind;

export type SetAccessorDeclarationKindCodeReturnType = number;

export type SetAccessorDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type SetAccessorDeclarationNameTextReturnType = null | string;

export type SetAccessorDeclarationParametersReturnType = MaybePromiseList<ParameterDeclarationReturnType>;

export type SetAccessorDeclarationParentReturnType = NodeReturnType;

export type SetAccessorDeclarationPosReturnType = number;

export type SetAccessorDeclarationQuestionTokenReturnType = null | TokenReturnType;

export type SetAccessorDeclarationRawTextReturnType = string;

export interface SetAccessorDeclarationRawTextArgs extends NodeRawTextArgs {}

export type SetAccessorDeclarationTypeReturnType = null | NodeReturnType;

export type SetAccessorDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclarationReturnType>;

export type SetAccessorDeclarationRootType = ts.SetAccessorDeclaration;

export type SetAccessorDeclarationReturnType = ts.SetAccessorDeclaration

export type ThisTypeNodeEndReturnType = number;

export type ThisTypeNodeFlagsReturnType = NodeFlags;

export type ThisTypeNodeKindReturnType = SyntaxKind;

export type ThisTypeNodeKindCodeReturnType = number;

export type ThisTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type ThisTypeNodeParentReturnType = NodeReturnType;

export type ThisTypeNodePosReturnType = number;

export type ThisTypeNodeRawTextReturnType = string;

export interface ThisTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ThisTypeNodeRootType = ts.ThisTypeNode;

export type ThisTypeNodeReturnType = ts.ThisTypeNode

export type TupleTypeNodeEndReturnType = number;

export type TupleTypeNodeFlagsReturnType = NodeFlags;

export type TupleTypeNodeKindReturnType = SyntaxKind;

export type TupleTypeNodeKindCodeReturnType = number;

export type TupleTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type TupleTypeNodeParentReturnType = NodeReturnType;

export type TupleTypeNodePosReturnType = number;

export type TupleTypeNodeRawTextReturnType = string;

export interface TupleTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type TupleTypeNodeRootType = ts.TupleTypeNode;

export type TupleTypeNodeReturnType = ts.TupleTypeNode

export type TypeAliasDeclarationEndReturnType = number;

export type TypeAliasDeclarationFlagsReturnType = NodeFlags;

export type TypeAliasDeclarationKindReturnType = SyntaxKind;

export type TypeAliasDeclarationKindCodeReturnType = number;

export type TypeAliasDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type TypeAliasDeclarationParentReturnType = NodeReturnType;

export type TypeAliasDeclarationPosReturnType = number;

export type TypeAliasDeclarationRawTextReturnType = string;

export interface TypeAliasDeclarationRawTextArgs extends NodeRawTextArgs {}

export type TypeAliasDeclarationRootType = ts.TypeAliasDeclaration;

export type TypeAliasDeclarationReturnType = ts.TypeAliasDeclaration

export type TypeReferenceEndReturnType = number;

export type TypeReferenceFlagsReturnType = NodeFlags;

export type TypeReferenceKindReturnType = SyntaxKind;

export type TypeReferenceKindCodeReturnType = number;

export type TypeReferenceModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type TypeReferenceNameTextReturnType = null | string;

export type TypeReferenceParentReturnType = NodeReturnType;

export type TypeReferencePosReturnType = number;

export type TypeReferenceRawTextReturnType = string;

export interface TypeReferenceRawTextArgs extends NodeRawTextArgs {}

export type TypeReferenceTextReturnType = null | string;

export type TypeReferenceRootType = ts.TypeReference;

export type TypeReferenceReturnType = ts.TypeReference

export type UnionTypeNodeEndReturnType = number;

export type UnionTypeNodeFlagsReturnType = NodeFlags;

export type UnionTypeNodeKindReturnType = SyntaxKind;

export type UnionTypeNodeKindCodeReturnType = number;

export type UnionTypeNodeModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type UnionTypeNodeParentReturnType = NodeReturnType;

export type UnionTypeNodePosReturnType = number;

export type UnionTypeNodeRawTextReturnType = string;

export interface UnionTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type UnionTypeNodeRootType = ts.UnionTypeNode;

export type UnionTypeNodeReturnType = ts.UnionTypeNode

export type UNKNOWN_NODEEndReturnType = number;

export type UNKNOWN_NODEFlagsReturnType = NodeFlags;

export type UNKNOWN_NODEKindReturnType = SyntaxKind;

export type UNKNOWN_NODEKindCodeReturnType = number;

export type UNKNOWN_NODEModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type UNKNOWN_NODEParentReturnType = NodeReturnType;

export type UNKNOWN_NODEPosReturnType = number;

export type UNKNOWN_NODERawTextReturnType = string;

export interface UNKNOWN_NODERawTextArgs extends NodeRawTextArgs {}

export interface UNKNOWN_NODERootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  kindCode: number;
  modifiers?: null | any[];
  parent: any;
  pos: number;
  rawText: string;
}

export type UNKNOWN_NODEReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  kindCode: MaybeThunk<MaybePromise<number>>;
  modifiers?: MaybeThunk<MaybePromise<null | any[]>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
  rawText: MaybeThunkArgs<MaybePromise<string>, UNKNOWN_NODERawTextArgs>;
}

export type VariableDeclarationEndReturnType = number;

export type VariableDeclarationFlagsReturnType = NodeFlags;

export type VariableDeclarationKindReturnType = SyntaxKind;

export type VariableDeclarationKindCodeReturnType = number;

export type VariableDeclarationModifiersReturnType = null | MaybePromiseList<TokenReturnType>;

export type VariableDeclarationParentReturnType = NodeReturnType;

export type VariableDeclarationPosReturnType = number;

export type VariableDeclarationRawTextReturnType = string;

export interface VariableDeclarationRawTextArgs extends NodeRawTextArgs {}

export type VariableDeclarationRootType = ts.VariableDeclaration;

export type VariableDeclarationReturnType = ts.VariableDeclaration

export type NodeRootType = ts.Node;

export type NodeReturnType = ts.Node;

export interface GraphQLiteralGenArgTypes {
  Query: {
    parseFile: QueryParseFileArgs;
  };
  SourceFile: {
    rawText: SourceFileRawTextArgs;
  };
  Node: {
    rawText: NodeRawTextArgs;
  };
  ArrayTypeNode: {
    rawText: ArrayTypeNodeRawTextArgs;
  };
  CallSignatureDeclaration: {
    rawText: CallSignatureDeclarationRawTextArgs;
  };
  ClassDeclaration: {
    rawText: ClassDeclarationRawTextArgs;
  };
  ComputedPropertyName: {
    rawText: ComputedPropertyNameRawTextArgs;
  };
  ConditionalTypeNode: {
    rawText: ConditionalTypeNodeRawTextArgs;
  };
  ConstructorDeclaration: {
    rawText: ConstructorDeclarationRawTextArgs;
  };
  ParameterDeclaration: {
    rawText: ParameterDeclarationRawTextArgs;
  };
  TypeParameterDeclaration: {
    rawText: TypeParameterDeclarationRawTextArgs;
  };
  ConstructorTypeNode: {
    rawText: ConstructorTypeNodeRawTextArgs;
  };
  ConstructSignatureDeclaration: {
    rawText: ConstructSignatureDeclarationRawTextArgs;
  };
  EnumDeclaration: {
    rawText: EnumDeclarationRawTextArgs;
  };
  ExportAssignment: {
    rawText: ExportAssignmentRawTextArgs;
  };
  ExportDeclaration: {
    rawText: ExportDeclarationRawTextArgs;
  };
  FunctionDeclaration: {
    rawText: FunctionDeclarationRawTextArgs;
  };
  FunctionTypeNode: {
    rawText: FunctionTypeNodeRawTextArgs;
  };
  GetAccessorDeclaration: {
    rawText: GetAccessorDeclarationRawTextArgs;
  };
  Identifier: {
    rawText: IdentifierRawTextArgs;
  };
  ImportDeclaration: {
    rawText: ImportDeclarationRawTextArgs;
  };
  ImportEqualsDeclaration: {
    rawText: ImportEqualsDeclarationRawTextArgs;
  };
  ImportTypeNode: {
    rawText: ImportTypeNodeRawTextArgs;
  };
  IndexedAccessTypeNode: {
    rawText: IndexedAccessTypeNodeRawTextArgs;
  };
  IndexSignatureDeclaration: {
    rawText: IndexSignatureDeclarationRawTextArgs;
  };
  InferTypeNode: {
    rawText: InferTypeNodeRawTextArgs;
  };
  InterfaceDeclaration: {
    rawText: InterfaceDeclarationRawTextArgs;
  };
  IntersectionTypeNode: {
    rawText: IntersectionTypeNodeRawTextArgs;
  };
  JSDoc: {
    rawText: JSDocRawTextArgs;
  };
  JSDocNamespaceDeclaration: {
    rawText: JSDocNamespaceDeclarationRawTextArgs;
  };
  KeywordTypeNode: {
    rawText: KeywordTypeNodeRawTextArgs;
  };
  LiteralTypeNode: {
    rawText: LiteralTypeNodeRawTextArgs;
  };
  MappedTypeNode: {
    rawText: MappedTypeNodeRawTextArgs;
  };
  MethodDeclaration: {
    rawText: MethodDeclarationRawTextArgs;
  };
  MissingDeclaration: {
    rawText: MissingDeclarationRawTextArgs;
  };
  ModuleDeclaration: {
    rawText: ModuleDeclarationRawTextArgs;
  };
  NamedDeclaration: {
    rawText: NamedDeclarationRawTextArgs;
  };
  NamespaceDeclaration: {
    rawText: NamespaceDeclarationRawTextArgs;
  };
  NamespaceExportDeclaration: {
    rawText: NamespaceExportDeclarationRawTextArgs;
  };
  NumericLiteral: {
    rawText: NumericLiteralRawTextArgs;
  };
  OptionalTypeNode: {
    rawText: OptionalTypeNodeRawTextArgs;
  };
  ParenthesizedTypeNode: {
    rawText: ParenthesizedTypeNodeRawTextArgs;
  };
  PropertyDeclaration: {
    rawText: PropertyDeclarationRawTextArgs;
  };
  PropertyLikeDeclaration: {
    rawText: PropertyLikeDeclarationRawTextArgs;
  };
  StringLiteral: {
    rawText: StringLiteralRawTextArgs;
  };
  RestTypeNode: {
    rawText: RestTypeNodeRawTextArgs;
  };
  SetAccessorDeclaration: {
    rawText: SetAccessorDeclarationRawTextArgs;
  };
  ThisTypeNode: {
    rawText: ThisTypeNodeRawTextArgs;
  };
  TupleTypeNode: {
    rawText: TupleTypeNodeRawTextArgs;
  };
  TypeAliasDeclaration: {
    rawText: TypeAliasDeclarationRawTextArgs;
  };
  TypeReference: {
    rawText: TypeReferenceRawTextArgs;
  };
  UnionTypeNode: {
    rawText: UnionTypeNodeRawTextArgs;
  };
  UNKNOWN_NODE: {
    rawText: UNKNOWN_NODERawTextArgs;
  };
  VariableDeclaration: {
    rawText: VariableDeclarationRawTextArgs;
  };
}

export interface GraphQLiteralGenRootTypes {
  Node: NodeRootType;
  Query: QueryRootType;
  SourceFile: SourceFileRootType;
  Token: TokenRootType;
  ArrayTypeNode: ArrayTypeNodeRootType;
  CallSignatureDeclaration: CallSignatureDeclarationRootType;
  ClassDeclaration: ClassDeclarationRootType;
  ComputedPropertyName: ComputedPropertyNameRootType;
  ConditionalTypeNode: ConditionalTypeNodeRootType;
  ConstructorDeclaration: ConstructorDeclarationRootType;
  ParameterDeclaration: ParameterDeclarationRootType;
  TypeParameterDeclaration: TypeParameterDeclarationRootType;
  ConstructorTypeNode: ConstructorTypeNodeRootType;
  ConstructSignatureDeclaration: ConstructSignatureDeclarationRootType;
  EnumDeclaration: EnumDeclarationRootType;
  ExportAssignment: ExportAssignmentRootType;
  ExportDeclaration: ExportDeclarationRootType;
  FunctionDeclaration: FunctionDeclarationRootType;
  FunctionTypeNode: FunctionTypeNodeRootType;
  GetAccessorDeclaration: GetAccessorDeclarationRootType;
  Identifier: IdentifierRootType;
  ImportDeclaration: ImportDeclarationRootType;
  ImportEqualsDeclaration: ImportEqualsDeclarationRootType;
  ImportTypeNode: ImportTypeNodeRootType;
  IndexedAccessTypeNode: IndexedAccessTypeNodeRootType;
  IndexSignatureDeclaration: IndexSignatureDeclarationRootType;
  InferTypeNode: InferTypeNodeRootType;
  InterfaceDeclaration: InterfaceDeclarationRootType;
  IntersectionTypeNode: IntersectionTypeNodeRootType;
  JSDoc: JSDocRootType;
  JSDocNamespaceDeclaration: JSDocNamespaceDeclarationRootType;
  KeywordTypeNode: KeywordTypeNodeRootType;
  LiteralTypeNode: LiteralTypeNodeRootType;
  MappedTypeNode: MappedTypeNodeRootType;
  MethodDeclaration: MethodDeclarationRootType;
  MissingDeclaration: MissingDeclarationRootType;
  ModuleDeclaration: ModuleDeclarationRootType;
  NamedDeclaration: NamedDeclarationRootType;
  NamespaceDeclaration: NamespaceDeclarationRootType;
  NamespaceExportDeclaration: NamespaceExportDeclarationRootType;
  NumericLiteral: NumericLiteralRootType;
  OptionalTypeNode: OptionalTypeNodeRootType;
  ParenthesizedTypeNode: ParenthesizedTypeNodeRootType;
  PropertyDeclaration: PropertyDeclarationRootType;
  PropertyLikeDeclaration: PropertyLikeDeclarationRootType;
  StringLiteral: StringLiteralRootType;
  RestTypeNode: RestTypeNodeRootType;
  SetAccessorDeclaration: SetAccessorDeclarationRootType;
  ThisTypeNode: ThisTypeNodeRootType;
  TupleTypeNode: TupleTypeNodeRootType;
  TypeAliasDeclaration: TypeAliasDeclarationRootType;
  TypeReference: TypeReferenceRootType;
  UnionTypeNode: UnionTypeNodeRootType;
  UNKNOWN_NODE: UNKNOWN_NODERootType;
  VariableDeclaration: VariableDeclarationRootType;
}

export interface GraphQLiteralGenReturnTypes {
  Query: {
    parseFile: QueryParseFileReturnType;
  };
  SourceFile: {
    end: SourceFileEndReturnType;
    flags: SourceFileFlagsReturnType;
    kind: SourceFileKindReturnType;
    kindCode: SourceFileKindCodeReturnType;
    modifiers: SourceFileModifiersReturnType;
    parent: SourceFileParentReturnType;
    pos: SourceFilePosReturnType;
    rawText: SourceFileRawTextReturnType;
    statements: SourceFileStatementsReturnType;
  };
  Node: {
    end: NodeEndReturnType;
    flags: NodeFlagsReturnType;
    kind: NodeKindReturnType;
    kindCode: NodeKindCodeReturnType;
    modifiers: NodeModifiersReturnType;
    parent: NodeParentReturnType;
    pos: NodePosReturnType;
    rawText: NodeRawTextReturnType;
  };
  Token: {
    kind: TokenKindReturnType;
  };
  ArrayTypeNode: {
    end: ArrayTypeNodeEndReturnType;
    flags: ArrayTypeNodeFlagsReturnType;
    kind: ArrayTypeNodeKindReturnType;
    kindCode: ArrayTypeNodeKindCodeReturnType;
    modifiers: ArrayTypeNodeModifiersReturnType;
    parent: ArrayTypeNodeParentReturnType;
    pos: ArrayTypeNodePosReturnType;
    rawText: ArrayTypeNodeRawTextReturnType;
  };
  CallSignatureDeclaration: {
    end: CallSignatureDeclarationEndReturnType;
    flags: CallSignatureDeclarationFlagsReturnType;
    kind: CallSignatureDeclarationKindReturnType;
    kindCode: CallSignatureDeclarationKindCodeReturnType;
    modifiers: CallSignatureDeclarationModifiersReturnType;
    parent: CallSignatureDeclarationParentReturnType;
    pos: CallSignatureDeclarationPosReturnType;
    rawText: CallSignatureDeclarationRawTextReturnType;
  };
  ClassDeclaration: {
    end: ClassDeclarationEndReturnType;
    flags: ClassDeclarationFlagsReturnType;
    kind: ClassDeclarationKindReturnType;
    kindCode: ClassDeclarationKindCodeReturnType;
    members: ClassDeclarationMembersReturnType;
    modifiers: ClassDeclarationModifiersReturnType;
    nameText: ClassDeclarationNameTextReturnType;
    parent: ClassDeclarationParentReturnType;
    pos: ClassDeclarationPosReturnType;
    rawText: ClassDeclarationRawTextReturnType;
  };
  ComputedPropertyName: {
    end: ComputedPropertyNameEndReturnType;
    flags: ComputedPropertyNameFlagsReturnType;
    kind: ComputedPropertyNameKindReturnType;
    kindCode: ComputedPropertyNameKindCodeReturnType;
    modifiers: ComputedPropertyNameModifiersReturnType;
    parent: ComputedPropertyNameParentReturnType;
    pos: ComputedPropertyNamePosReturnType;
    rawText: ComputedPropertyNameRawTextReturnType;
  };
  ConditionalTypeNode: {
    end: ConditionalTypeNodeEndReturnType;
    flags: ConditionalTypeNodeFlagsReturnType;
    kind: ConditionalTypeNodeKindReturnType;
    kindCode: ConditionalTypeNodeKindCodeReturnType;
    modifiers: ConditionalTypeNodeModifiersReturnType;
    parent: ConditionalTypeNodeParentReturnType;
    pos: ConditionalTypeNodePosReturnType;
    rawText: ConditionalTypeNodeRawTextReturnType;
  };
  ConstructorDeclaration: {
    asteriskToken: ConstructorDeclarationAsteriskTokenReturnType;
    end: ConstructorDeclarationEndReturnType;
    exclamationToken: ConstructorDeclarationExclamationTokenReturnType;
    flags: ConstructorDeclarationFlagsReturnType;
    kind: ConstructorDeclarationKindReturnType;
    kindCode: ConstructorDeclarationKindCodeReturnType;
    modifiers: ConstructorDeclarationModifiersReturnType;
    nameText: ConstructorDeclarationNameTextReturnType;
    parameters: ConstructorDeclarationParametersReturnType;
    parent: ConstructorDeclarationParentReturnType;
    pos: ConstructorDeclarationPosReturnType;
    questionToken: ConstructorDeclarationQuestionTokenReturnType;
    rawText: ConstructorDeclarationRawTextReturnType;
    type: ConstructorDeclarationTypeReturnType;
    typeParameters: ConstructorDeclarationTypeParametersReturnType;
  };
  ParameterDeclaration: {
    end: ParameterDeclarationEndReturnType;
    flags: ParameterDeclarationFlagsReturnType;
    kind: ParameterDeclarationKindReturnType;
    kindCode: ParameterDeclarationKindCodeReturnType;
    modifiers: ParameterDeclarationModifiersReturnType;
    nameText: ParameterDeclarationNameTextReturnType;
    parent: ParameterDeclarationParentReturnType;
    pos: ParameterDeclarationPosReturnType;
    rawText: ParameterDeclarationRawTextReturnType;
    type: ParameterDeclarationTypeReturnType;
  };
  TypeParameterDeclaration: {
    end: TypeParameterDeclarationEndReturnType;
    flags: TypeParameterDeclarationFlagsReturnType;
    kind: TypeParameterDeclarationKindReturnType;
    kindCode: TypeParameterDeclarationKindCodeReturnType;
    modifiers: TypeParameterDeclarationModifiersReturnType;
    parent: TypeParameterDeclarationParentReturnType;
    pos: TypeParameterDeclarationPosReturnType;
    rawText: TypeParameterDeclarationRawTextReturnType;
  };
  ConstructorTypeNode: {
    end: ConstructorTypeNodeEndReturnType;
    flags: ConstructorTypeNodeFlagsReturnType;
    kind: ConstructorTypeNodeKindReturnType;
    kindCode: ConstructorTypeNodeKindCodeReturnType;
    modifiers: ConstructorTypeNodeModifiersReturnType;
    parent: ConstructorTypeNodeParentReturnType;
    pos: ConstructorTypeNodePosReturnType;
    rawText: ConstructorTypeNodeRawTextReturnType;
  };
  ConstructSignatureDeclaration: {
    end: ConstructSignatureDeclarationEndReturnType;
    flags: ConstructSignatureDeclarationFlagsReturnType;
    kind: ConstructSignatureDeclarationKindReturnType;
    kindCode: ConstructSignatureDeclarationKindCodeReturnType;
    modifiers: ConstructSignatureDeclarationModifiersReturnType;
    parent: ConstructSignatureDeclarationParentReturnType;
    pos: ConstructSignatureDeclarationPosReturnType;
    rawText: ConstructSignatureDeclarationRawTextReturnType;
  };
  EnumDeclaration: {
    end: EnumDeclarationEndReturnType;
    flags: EnumDeclarationFlagsReturnType;
    kind: EnumDeclarationKindReturnType;
    kindCode: EnumDeclarationKindCodeReturnType;
    modifiers: EnumDeclarationModifiersReturnType;
    parent: EnumDeclarationParentReturnType;
    pos: EnumDeclarationPosReturnType;
    rawText: EnumDeclarationRawTextReturnType;
  };
  ExportAssignment: {
    end: ExportAssignmentEndReturnType;
    flags: ExportAssignmentFlagsReturnType;
    kind: ExportAssignmentKindReturnType;
    kindCode: ExportAssignmentKindCodeReturnType;
    modifiers: ExportAssignmentModifiersReturnType;
    parent: ExportAssignmentParentReturnType;
    pos: ExportAssignmentPosReturnType;
    rawText: ExportAssignmentRawTextReturnType;
  };
  ExportDeclaration: {
    end: ExportDeclarationEndReturnType;
    flags: ExportDeclarationFlagsReturnType;
    kind: ExportDeclarationKindReturnType;
    kindCode: ExportDeclarationKindCodeReturnType;
    modifiers: ExportDeclarationModifiersReturnType;
    parent: ExportDeclarationParentReturnType;
    pos: ExportDeclarationPosReturnType;
    rawText: ExportDeclarationRawTextReturnType;
  };
  FunctionDeclaration: {
    asteriskToken: FunctionDeclarationAsteriskTokenReturnType;
    end: FunctionDeclarationEndReturnType;
    exclamationToken: FunctionDeclarationExclamationTokenReturnType;
    flags: FunctionDeclarationFlagsReturnType;
    kind: FunctionDeclarationKindReturnType;
    kindCode: FunctionDeclarationKindCodeReturnType;
    modifiers: FunctionDeclarationModifiersReturnType;
    nameText: FunctionDeclarationNameTextReturnType;
    parameters: FunctionDeclarationParametersReturnType;
    parent: FunctionDeclarationParentReturnType;
    pos: FunctionDeclarationPosReturnType;
    questionToken: FunctionDeclarationQuestionTokenReturnType;
    rawText: FunctionDeclarationRawTextReturnType;
    type: FunctionDeclarationTypeReturnType;
    typeParameters: FunctionDeclarationTypeParametersReturnType;
  };
  FunctionTypeNode: {
    end: FunctionTypeNodeEndReturnType;
    flags: FunctionTypeNodeFlagsReturnType;
    kind: FunctionTypeNodeKindReturnType;
    kindCode: FunctionTypeNodeKindCodeReturnType;
    modifiers: FunctionTypeNodeModifiersReturnType;
    parent: FunctionTypeNodeParentReturnType;
    pos: FunctionTypeNodePosReturnType;
    rawText: FunctionTypeNodeRawTextReturnType;
  };
  GetAccessorDeclaration: {
    asteriskToken: GetAccessorDeclarationAsteriskTokenReturnType;
    end: GetAccessorDeclarationEndReturnType;
    exclamationToken: GetAccessorDeclarationExclamationTokenReturnType;
    flags: GetAccessorDeclarationFlagsReturnType;
    kind: GetAccessorDeclarationKindReturnType;
    kindCode: GetAccessorDeclarationKindCodeReturnType;
    modifiers: GetAccessorDeclarationModifiersReturnType;
    nameText: GetAccessorDeclarationNameTextReturnType;
    parameters: GetAccessorDeclarationParametersReturnType;
    parent: GetAccessorDeclarationParentReturnType;
    pos: GetAccessorDeclarationPosReturnType;
    questionToken: GetAccessorDeclarationQuestionTokenReturnType;
    rawText: GetAccessorDeclarationRawTextReturnType;
    type: GetAccessorDeclarationTypeReturnType;
    typeParameters: GetAccessorDeclarationTypeParametersReturnType;
  };
  Identifier: {
    end: IdentifierEndReturnType;
    flags: IdentifierFlagsReturnType;
    kind: IdentifierKindReturnType;
    kindCode: IdentifierKindCodeReturnType;
    modifiers: IdentifierModifiersReturnType;
    parent: IdentifierParentReturnType;
    pos: IdentifierPosReturnType;
    rawText: IdentifierRawTextReturnType;
  };
  ImportDeclaration: {
    end: ImportDeclarationEndReturnType;
    flags: ImportDeclarationFlagsReturnType;
    kind: ImportDeclarationKindReturnType;
    kindCode: ImportDeclarationKindCodeReturnType;
    modifiers: ImportDeclarationModifiersReturnType;
    parent: ImportDeclarationParentReturnType;
    pos: ImportDeclarationPosReturnType;
    rawText: ImportDeclarationRawTextReturnType;
  };
  ImportEqualsDeclaration: {
    end: ImportEqualsDeclarationEndReturnType;
    flags: ImportEqualsDeclarationFlagsReturnType;
    kind: ImportEqualsDeclarationKindReturnType;
    kindCode: ImportEqualsDeclarationKindCodeReturnType;
    modifiers: ImportEqualsDeclarationModifiersReturnType;
    parent: ImportEqualsDeclarationParentReturnType;
    pos: ImportEqualsDeclarationPosReturnType;
    rawText: ImportEqualsDeclarationRawTextReturnType;
  };
  ImportTypeNode: {
    end: ImportTypeNodeEndReturnType;
    flags: ImportTypeNodeFlagsReturnType;
    kind: ImportTypeNodeKindReturnType;
    kindCode: ImportTypeNodeKindCodeReturnType;
    modifiers: ImportTypeNodeModifiersReturnType;
    parent: ImportTypeNodeParentReturnType;
    pos: ImportTypeNodePosReturnType;
    rawText: ImportTypeNodeRawTextReturnType;
  };
  IndexedAccessTypeNode: {
    end: IndexedAccessTypeNodeEndReturnType;
    flags: IndexedAccessTypeNodeFlagsReturnType;
    kind: IndexedAccessTypeNodeKindReturnType;
    kindCode: IndexedAccessTypeNodeKindCodeReturnType;
    modifiers: IndexedAccessTypeNodeModifiersReturnType;
    parent: IndexedAccessTypeNodeParentReturnType;
    pos: IndexedAccessTypeNodePosReturnType;
    rawText: IndexedAccessTypeNodeRawTextReturnType;
  };
  IndexSignatureDeclaration: {
    end: IndexSignatureDeclarationEndReturnType;
    flags: IndexSignatureDeclarationFlagsReturnType;
    kind: IndexSignatureDeclarationKindReturnType;
    kindCode: IndexSignatureDeclarationKindCodeReturnType;
    modifiers: IndexSignatureDeclarationModifiersReturnType;
    parent: IndexSignatureDeclarationParentReturnType;
    pos: IndexSignatureDeclarationPosReturnType;
    rawText: IndexSignatureDeclarationRawTextReturnType;
  };
  InferTypeNode: {
    end: InferTypeNodeEndReturnType;
    flags: InferTypeNodeFlagsReturnType;
    kind: InferTypeNodeKindReturnType;
    kindCode: InferTypeNodeKindCodeReturnType;
    modifiers: InferTypeNodeModifiersReturnType;
    parent: InferTypeNodeParentReturnType;
    pos: InferTypeNodePosReturnType;
    rawText: InferTypeNodeRawTextReturnType;
  };
  InterfaceDeclaration: {
    end: InterfaceDeclarationEndReturnType;
    flags: InterfaceDeclarationFlagsReturnType;
    kind: InterfaceDeclarationKindReturnType;
    kindCode: InterfaceDeclarationKindCodeReturnType;
    modifiers: InterfaceDeclarationModifiersReturnType;
    parent: InterfaceDeclarationParentReturnType;
    pos: InterfaceDeclarationPosReturnType;
    rawText: InterfaceDeclarationRawTextReturnType;
  };
  IntersectionTypeNode: {
    end: IntersectionTypeNodeEndReturnType;
    flags: IntersectionTypeNodeFlagsReturnType;
    kind: IntersectionTypeNodeKindReturnType;
    kindCode: IntersectionTypeNodeKindCodeReturnType;
    modifiers: IntersectionTypeNodeModifiersReturnType;
    parent: IntersectionTypeNodeParentReturnType;
    pos: IntersectionTypeNodePosReturnType;
    rawText: IntersectionTypeNodeRawTextReturnType;
  };
  JSDoc: {
    end: JSDocEndReturnType;
    flags: JSDocFlagsReturnType;
    kind: JSDocKindReturnType;
    kindCode: JSDocKindCodeReturnType;
    modifiers: JSDocModifiersReturnType;
    parent: JSDocParentReturnType;
    pos: JSDocPosReturnType;
    rawText: JSDocRawTextReturnType;
  };
  JSDocNamespaceDeclaration: {
    end: JSDocNamespaceDeclarationEndReturnType;
    flags: JSDocNamespaceDeclarationFlagsReturnType;
    kind: JSDocNamespaceDeclarationKindReturnType;
    kindCode: JSDocNamespaceDeclarationKindCodeReturnType;
    modifiers: JSDocNamespaceDeclarationModifiersReturnType;
    parent: JSDocNamespaceDeclarationParentReturnType;
    pos: JSDocNamespaceDeclarationPosReturnType;
    rawText: JSDocNamespaceDeclarationRawTextReturnType;
  };
  KeywordTypeNode: {
    end: KeywordTypeNodeEndReturnType;
    flags: KeywordTypeNodeFlagsReturnType;
    kind: KeywordTypeNodeKindReturnType;
    kindCode: KeywordTypeNodeKindCodeReturnType;
    modifiers: KeywordTypeNodeModifiersReturnType;
    parent: KeywordTypeNodeParentReturnType;
    pos: KeywordTypeNodePosReturnType;
    rawText: KeywordTypeNodeRawTextReturnType;
  };
  LiteralTypeNode: {
    end: LiteralTypeNodeEndReturnType;
    flags: LiteralTypeNodeFlagsReturnType;
    kind: LiteralTypeNodeKindReturnType;
    kindCode: LiteralTypeNodeKindCodeReturnType;
    modifiers: LiteralTypeNodeModifiersReturnType;
    parent: LiteralTypeNodeParentReturnType;
    pos: LiteralTypeNodePosReturnType;
    rawText: LiteralTypeNodeRawTextReturnType;
  };
  MappedTypeNode: {
    end: MappedTypeNodeEndReturnType;
    flags: MappedTypeNodeFlagsReturnType;
    kind: MappedTypeNodeKindReturnType;
    kindCode: MappedTypeNodeKindCodeReturnType;
    modifiers: MappedTypeNodeModifiersReturnType;
    parent: MappedTypeNodeParentReturnType;
    pos: MappedTypeNodePosReturnType;
    rawText: MappedTypeNodeRawTextReturnType;
  };
  MethodDeclaration: {
    asteriskToken: MethodDeclarationAsteriskTokenReturnType;
    end: MethodDeclarationEndReturnType;
    exclamationToken: MethodDeclarationExclamationTokenReturnType;
    flags: MethodDeclarationFlagsReturnType;
    kind: MethodDeclarationKindReturnType;
    kindCode: MethodDeclarationKindCodeReturnType;
    modifiers: MethodDeclarationModifiersReturnType;
    nameText: MethodDeclarationNameTextReturnType;
    parameters: MethodDeclarationParametersReturnType;
    parent: MethodDeclarationParentReturnType;
    pos: MethodDeclarationPosReturnType;
    questionToken: MethodDeclarationQuestionTokenReturnType;
    rawText: MethodDeclarationRawTextReturnType;
    type: MethodDeclarationTypeReturnType;
    typeParameters: MethodDeclarationTypeParametersReturnType;
  };
  MissingDeclaration: {
    end: MissingDeclarationEndReturnType;
    flags: MissingDeclarationFlagsReturnType;
    kind: MissingDeclarationKindReturnType;
    kindCode: MissingDeclarationKindCodeReturnType;
    modifiers: MissingDeclarationModifiersReturnType;
    parent: MissingDeclarationParentReturnType;
    pos: MissingDeclarationPosReturnType;
    rawText: MissingDeclarationRawTextReturnType;
  };
  ModuleDeclaration: {
    end: ModuleDeclarationEndReturnType;
    flags: ModuleDeclarationFlagsReturnType;
    kind: ModuleDeclarationKindReturnType;
    kindCode: ModuleDeclarationKindCodeReturnType;
    modifiers: ModuleDeclarationModifiersReturnType;
    parent: ModuleDeclarationParentReturnType;
    pos: ModuleDeclarationPosReturnType;
    rawText: ModuleDeclarationRawTextReturnType;
  };
  NamedDeclaration: {
    end: NamedDeclarationEndReturnType;
    flags: NamedDeclarationFlagsReturnType;
    kind: NamedDeclarationKindReturnType;
    kindCode: NamedDeclarationKindCodeReturnType;
    modifiers: NamedDeclarationModifiersReturnType;
    parent: NamedDeclarationParentReturnType;
    pos: NamedDeclarationPosReturnType;
    rawText: NamedDeclarationRawTextReturnType;
  };
  NamespaceDeclaration: {
    end: NamespaceDeclarationEndReturnType;
    flags: NamespaceDeclarationFlagsReturnType;
    kind: NamespaceDeclarationKindReturnType;
    kindCode: NamespaceDeclarationKindCodeReturnType;
    modifiers: NamespaceDeclarationModifiersReturnType;
    parent: NamespaceDeclarationParentReturnType;
    pos: NamespaceDeclarationPosReturnType;
    rawText: NamespaceDeclarationRawTextReturnType;
  };
  NamespaceExportDeclaration: {
    end: NamespaceExportDeclarationEndReturnType;
    flags: NamespaceExportDeclarationFlagsReturnType;
    kind: NamespaceExportDeclarationKindReturnType;
    kindCode: NamespaceExportDeclarationKindCodeReturnType;
    modifiers: NamespaceExportDeclarationModifiersReturnType;
    parent: NamespaceExportDeclarationParentReturnType;
    pos: NamespaceExportDeclarationPosReturnType;
    rawText: NamespaceExportDeclarationRawTextReturnType;
  };
  NumericLiteral: {
    end: NumericLiteralEndReturnType;
    flags: NumericLiteralFlagsReturnType;
    kind: NumericLiteralKindReturnType;
    kindCode: NumericLiteralKindCodeReturnType;
    modifiers: NumericLiteralModifiersReturnType;
    parent: NumericLiteralParentReturnType;
    pos: NumericLiteralPosReturnType;
    rawText: NumericLiteralRawTextReturnType;
  };
  OptionalTypeNode: {
    end: OptionalTypeNodeEndReturnType;
    flags: OptionalTypeNodeFlagsReturnType;
    kind: OptionalTypeNodeKindReturnType;
    kindCode: OptionalTypeNodeKindCodeReturnType;
    modifiers: OptionalTypeNodeModifiersReturnType;
    parent: OptionalTypeNodeParentReturnType;
    pos: OptionalTypeNodePosReturnType;
    rawText: OptionalTypeNodeRawTextReturnType;
  };
  ParenthesizedTypeNode: {
    end: ParenthesizedTypeNodeEndReturnType;
    flags: ParenthesizedTypeNodeFlagsReturnType;
    kind: ParenthesizedTypeNodeKindReturnType;
    kindCode: ParenthesizedTypeNodeKindCodeReturnType;
    modifiers: ParenthesizedTypeNodeModifiersReturnType;
    parent: ParenthesizedTypeNodeParentReturnType;
    pos: ParenthesizedTypeNodePosReturnType;
    rawText: ParenthesizedTypeNodeRawTextReturnType;
  };
  PropertyDeclaration: {
    end: PropertyDeclarationEndReturnType;
    flags: PropertyDeclarationFlagsReturnType;
    kind: PropertyDeclarationKindReturnType;
    kindCode: PropertyDeclarationKindCodeReturnType;
    modifiers: PropertyDeclarationModifiersReturnType;
    parent: PropertyDeclarationParentReturnType;
    pos: PropertyDeclarationPosReturnType;
    rawText: PropertyDeclarationRawTextReturnType;
  };
  PropertyLikeDeclaration: {
    end: PropertyLikeDeclarationEndReturnType;
    flags: PropertyLikeDeclarationFlagsReturnType;
    kind: PropertyLikeDeclarationKindReturnType;
    kindCode: PropertyLikeDeclarationKindCodeReturnType;
    modifiers: PropertyLikeDeclarationModifiersReturnType;
    parent: PropertyLikeDeclarationParentReturnType;
    pos: PropertyLikeDeclarationPosReturnType;
    rawText: PropertyLikeDeclarationRawTextReturnType;
  };
  StringLiteral: {
    end: StringLiteralEndReturnType;
    flags: StringLiteralFlagsReturnType;
    kind: StringLiteralKindReturnType;
    kindCode: StringLiteralKindCodeReturnType;
    modifiers: StringLiteralModifiersReturnType;
    parent: StringLiteralParentReturnType;
    pos: StringLiteralPosReturnType;
    rawText: StringLiteralRawTextReturnType;
  };
  RestTypeNode: {
    end: RestTypeNodeEndReturnType;
    flags: RestTypeNodeFlagsReturnType;
    kind: RestTypeNodeKindReturnType;
    kindCode: RestTypeNodeKindCodeReturnType;
    modifiers: RestTypeNodeModifiersReturnType;
    parent: RestTypeNodeParentReturnType;
    pos: RestTypeNodePosReturnType;
    rawText: RestTypeNodeRawTextReturnType;
  };
  SetAccessorDeclaration: {
    asteriskToken: SetAccessorDeclarationAsteriskTokenReturnType;
    end: SetAccessorDeclarationEndReturnType;
    exclamationToken: SetAccessorDeclarationExclamationTokenReturnType;
    flags: SetAccessorDeclarationFlagsReturnType;
    kind: SetAccessorDeclarationKindReturnType;
    kindCode: SetAccessorDeclarationKindCodeReturnType;
    modifiers: SetAccessorDeclarationModifiersReturnType;
    nameText: SetAccessorDeclarationNameTextReturnType;
    parameters: SetAccessorDeclarationParametersReturnType;
    parent: SetAccessorDeclarationParentReturnType;
    pos: SetAccessorDeclarationPosReturnType;
    questionToken: SetAccessorDeclarationQuestionTokenReturnType;
    rawText: SetAccessorDeclarationRawTextReturnType;
    type: SetAccessorDeclarationTypeReturnType;
    typeParameters: SetAccessorDeclarationTypeParametersReturnType;
  };
  ThisTypeNode: {
    end: ThisTypeNodeEndReturnType;
    flags: ThisTypeNodeFlagsReturnType;
    kind: ThisTypeNodeKindReturnType;
    kindCode: ThisTypeNodeKindCodeReturnType;
    modifiers: ThisTypeNodeModifiersReturnType;
    parent: ThisTypeNodeParentReturnType;
    pos: ThisTypeNodePosReturnType;
    rawText: ThisTypeNodeRawTextReturnType;
  };
  TupleTypeNode: {
    end: TupleTypeNodeEndReturnType;
    flags: TupleTypeNodeFlagsReturnType;
    kind: TupleTypeNodeKindReturnType;
    kindCode: TupleTypeNodeKindCodeReturnType;
    modifiers: TupleTypeNodeModifiersReturnType;
    parent: TupleTypeNodeParentReturnType;
    pos: TupleTypeNodePosReturnType;
    rawText: TupleTypeNodeRawTextReturnType;
  };
  TypeAliasDeclaration: {
    end: TypeAliasDeclarationEndReturnType;
    flags: TypeAliasDeclarationFlagsReturnType;
    kind: TypeAliasDeclarationKindReturnType;
    kindCode: TypeAliasDeclarationKindCodeReturnType;
    modifiers: TypeAliasDeclarationModifiersReturnType;
    parent: TypeAliasDeclarationParentReturnType;
    pos: TypeAliasDeclarationPosReturnType;
    rawText: TypeAliasDeclarationRawTextReturnType;
  };
  TypeReference: {
    end: TypeReferenceEndReturnType;
    flags: TypeReferenceFlagsReturnType;
    kind: TypeReferenceKindReturnType;
    kindCode: TypeReferenceKindCodeReturnType;
    modifiers: TypeReferenceModifiersReturnType;
    nameText: TypeReferenceNameTextReturnType;
    parent: TypeReferenceParentReturnType;
    pos: TypeReferencePosReturnType;
    rawText: TypeReferenceRawTextReturnType;
    text: TypeReferenceTextReturnType;
  };
  UnionTypeNode: {
    end: UnionTypeNodeEndReturnType;
    flags: UnionTypeNodeFlagsReturnType;
    kind: UnionTypeNodeKindReturnType;
    kindCode: UnionTypeNodeKindCodeReturnType;
    modifiers: UnionTypeNodeModifiersReturnType;
    parent: UnionTypeNodeParentReturnType;
    pos: UnionTypeNodePosReturnType;
    rawText: UnionTypeNodeRawTextReturnType;
  };
  UNKNOWN_NODE: {
    end: UNKNOWN_NODEEndReturnType;
    flags: UNKNOWN_NODEFlagsReturnType;
    kind: UNKNOWN_NODEKindReturnType;
    kindCode: UNKNOWN_NODEKindCodeReturnType;
    modifiers: UNKNOWN_NODEModifiersReturnType;
    parent: UNKNOWN_NODEParentReturnType;
    pos: UNKNOWN_NODEPosReturnType;
    rawText: UNKNOWN_NODERawTextReturnType;
  };
  VariableDeclaration: {
    end: VariableDeclarationEndReturnType;
    flags: VariableDeclarationFlagsReturnType;
    kind: VariableDeclarationKindReturnType;
    kindCode: VariableDeclarationKindCodeReturnType;
    modifiers: VariableDeclarationModifiersReturnType;
    parent: VariableDeclarationParentReturnType;
    pos: VariableDeclarationPosReturnType;
    rawText: VariableDeclarationRawTextReturnType;
  };
}

export interface GraphQLiteralGenTypes {
  argTypes: GraphQLiteralGenArgTypes;
  backingTypes: GraphQLiteralGenRootTypes;
  returnTypes: GraphQLiteralGenReturnTypes;
  context: t.ContextType;
  enums: {
    NodeFlags: NodeFlags;
    SyntaxKind: SyntaxKind;
  };
  objects: {
    Query: QueryRootType;
    SourceFile: SourceFileRootType;
    Token: TokenRootType;
    ArrayTypeNode: ArrayTypeNodeRootType;
    CallSignatureDeclaration: CallSignatureDeclarationRootType;
    ClassDeclaration: ClassDeclarationRootType;
    ComputedPropertyName: ComputedPropertyNameRootType;
    ConditionalTypeNode: ConditionalTypeNodeRootType;
    ConstructorDeclaration: ConstructorDeclarationRootType;
    ParameterDeclaration: ParameterDeclarationRootType;
    TypeParameterDeclaration: TypeParameterDeclarationRootType;
    ConstructorTypeNode: ConstructorTypeNodeRootType;
    ConstructSignatureDeclaration: ConstructSignatureDeclarationRootType;
    EnumDeclaration: EnumDeclarationRootType;
    ExportAssignment: ExportAssignmentRootType;
    ExportDeclaration: ExportDeclarationRootType;
    FunctionDeclaration: FunctionDeclarationRootType;
    FunctionTypeNode: FunctionTypeNodeRootType;
    GetAccessorDeclaration: GetAccessorDeclarationRootType;
    Identifier: IdentifierRootType;
    ImportDeclaration: ImportDeclarationRootType;
    ImportEqualsDeclaration: ImportEqualsDeclarationRootType;
    ImportTypeNode: ImportTypeNodeRootType;
    IndexedAccessTypeNode: IndexedAccessTypeNodeRootType;
    IndexSignatureDeclaration: IndexSignatureDeclarationRootType;
    InferTypeNode: InferTypeNodeRootType;
    InterfaceDeclaration: InterfaceDeclarationRootType;
    IntersectionTypeNode: IntersectionTypeNodeRootType;
    JSDoc: JSDocRootType;
    JSDocNamespaceDeclaration: JSDocNamespaceDeclarationRootType;
    KeywordTypeNode: KeywordTypeNodeRootType;
    LiteralTypeNode: LiteralTypeNodeRootType;
    MappedTypeNode: MappedTypeNodeRootType;
    MethodDeclaration: MethodDeclarationRootType;
    MissingDeclaration: MissingDeclarationRootType;
    ModuleDeclaration: ModuleDeclarationRootType;
    NamedDeclaration: NamedDeclarationRootType;
    NamespaceDeclaration: NamespaceDeclarationRootType;
    NamespaceExportDeclaration: NamespaceExportDeclarationRootType;
    NumericLiteral: NumericLiteralRootType;
    OptionalTypeNode: OptionalTypeNodeRootType;
    ParenthesizedTypeNode: ParenthesizedTypeNodeRootType;
    PropertyDeclaration: PropertyDeclarationRootType;
    PropertyLikeDeclaration: PropertyLikeDeclarationRootType;
    StringLiteral: StringLiteralRootType;
    RestTypeNode: RestTypeNodeRootType;
    SetAccessorDeclaration: SetAccessorDeclarationRootType;
    ThisTypeNode: ThisTypeNodeRootType;
    TupleTypeNode: TupleTypeNodeRootType;
    TypeAliasDeclaration: TypeAliasDeclarationRootType;
    TypeReference: TypeReferenceRootType;
    UnionTypeNode: UnionTypeNodeRootType;
    UNKNOWN_NODE: UNKNOWN_NODERootType;
    VariableDeclaration: VariableDeclarationRootType;
  };
  interfaces: {
    Node: "SourceFile" | "ArrayTypeNode" | "CallSignatureDeclaration" | "ClassDeclaration" | "ComputedPropertyName" | "ConditionalTypeNode" | "ConstructorDeclaration" | "ParameterDeclaration" | "TypeParameterDeclaration" | "ConstructorTypeNode" | "ConstructSignatureDeclaration" | "EnumDeclaration" | "ExportAssignment" | "ExportDeclaration" | "FunctionDeclaration" | "FunctionTypeNode" | "GetAccessorDeclaration" | "Identifier" | "ImportDeclaration" | "ImportEqualsDeclaration" | "ImportTypeNode" | "IndexedAccessTypeNode" | "IndexSignatureDeclaration" | "InferTypeNode" | "InterfaceDeclaration" | "IntersectionTypeNode" | "JSDoc" | "JSDocNamespaceDeclaration" | "KeywordTypeNode" | "LiteralTypeNode" | "MappedTypeNode" | "MethodDeclaration" | "MissingDeclaration" | "ModuleDeclaration" | "NamedDeclaration" | "NamespaceDeclaration" | "NamespaceExportDeclaration" | "NumericLiteral" | "OptionalTypeNode" | "ParenthesizedTypeNode" | "PropertyDeclaration" | "PropertyLikeDeclaration" | "StringLiteral" | "RestTypeNode" | "SetAccessorDeclaration" | "ThisTypeNode" | "TupleTypeNode" | "TypeAliasDeclaration" | "TypeReference" | "UnionTypeNode" | "UNKNOWN_NODE" | "VariableDeclaration";
  };
  unions: {
    PropertyName: any;
  };
  scalars: {
    String: any;
    Int: any;
    Boolean: any;
  };
  inputObjects: {};
  allInputTypes: 
    | Extract<keyof GraphQLiteralGenTypes['inputObjects'], string>
    | Extract<keyof GraphQLiteralGenTypes['enums'], string>
    | Extract<keyof GraphQLiteralGenTypes['scalars'], string>;
  allOutputTypes: 
    | Extract<keyof GraphQLiteralGenTypes['objects'], string>
    | Extract<keyof GraphQLiteralGenTypes['enums'], string>
    | Extract<keyof GraphQLiteralGenTypes['unions'], string>
    | Extract<keyof GraphQLiteralGenTypes['interfaces'], string>
    | Extract<keyof GraphQLiteralGenTypes['scalars'], string>;
}

export type Gen = GraphQLiteralGenTypes;
