/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 *
 * For better typings, you should provide configuration for how to lookup
 * the types. See the documentation for "typegenAutoConfig"
 */
import { GraphQLResolveInfo } from "graphql";
import * as t from "./typeDefs";
declare global {
  interface GraphQLNexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

interface NexusGenEnums {
  PatchSize: "LARGE" | "SMALL";
}

export interface NexusGenRootTypes {
  Launch: t.Launch;
  LaunchConnection: {
    // root types
    cursor?: string | null; // String
    hasMore: boolean; // Boolean!
    launches: Array<NexusGenRootTypes["Launch"] | null>; // [Launch]!
  };
  Mission: t.Mission;
  Mutation: {};
  Query: {};
  Rocket: t.Rocket;
  TripUpdateResponse: {
    // root types
    launches?: NexusGenRootTypes["Launch"][] | null; // [Launch!]
    message?: string | null; // String
    success: boolean; // Boolean!
  };
  User: {
    // root types
    email: string; // String!
    id: string; // ID!
  };
}

export interface NexusGenReturnTypes {
  Launch: {
    // return type
    id: string; // ID!
    isBooked: boolean; // Boolean!
    mission: NexusGenRootTypes["Mission"]; // Mission!
    rocket: NexusGenRootTypes["Rocket"]; // Rocket!
    site: string | null; // String
  };
  LaunchConnection: {
    // return type
    cursor: string | null; // String
    hasMore: boolean; // Boolean!
    launches: Array<NexusGenRootTypes["Launch"] | null>; // [Launch]!
  };
  Mission: {
    // return type
    missionPatch: string; // String!
    name: string | null; // String
  };
  Mutation: {
    // return type
    bookTrips: NexusGenRootTypes["TripUpdateResponse"]; // TripUpdateResponse!
    cancelTrip: NexusGenRootTypes["TripUpdateResponse"]; // TripUpdateResponse!
    login: string | null; // String
  };
  Query: {
    // return type
    launch: NexusGenRootTypes["Launch"]; // Launch!
    launches: NexusGenRootTypes["LaunchConnection"]; // LaunchConnection!
    me: NexusGenRootTypes["User"] | null; // User
  };
  Rocket: {
    // return type
    id: string; // ID!
    name: string | null; // String
    type: string | null; // String
  };
  TripUpdateResponse: {
    // return type
    launches: NexusGenRootTypes["Launch"][] | null; // [Launch!]
    message: string | null; // String
    success: boolean; // Boolean!
  };
  User: {
    // return type
    email: string; // String!
    id: string; // ID!
    trips: NexusGenRootTypes["Launch"][]; // [Launch!]!
  };
}

export interface NexusGenArgTypes {
  Mission: {
    missionPatch: {
      // args
      size?: NexusGenEnums["PatchSize"] | null; // PatchSize
    };
  };
  Mutation: {
    bookTrips: {
      // args
      launchIds: string[]; // [ID!]!
    };
    cancelTrip: {
      // args
      launchId: string; // ID!
    };
    login: {
      // args
      email?: string | null; // String
    };
  };
  Query: {
    launch: {
      // args
      count?: number | null; // Int
      id: string; // ID!
    };
    launches: {
      // args
      after?: string | null; // String
      pageSize?: number | null; // Int
    };
  };
}

interface NexusGenAbstractResolveSourceTypes {}

interface NexusGenAbstractResolveReturnTypes {}

export type NexusGenObjectNames =
  | "Launch"
  | "LaunchConnection"
  | "Mission"
  | "Mutation"
  | "Query"
  | "Rocket"
  | "TripUpdateResponse"
  | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "PatchSize";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: t.Context;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  returnTypes: NexusGenReturnTypes;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["enumNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveRoot: NexusGenAbstractResolveSourceTypes;
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

export type Gen = NexusGenTypes;

type MaybePromise<T> = PromiseLike<T> | T;
type SourceType<
  TypeName
> = TypeName extends keyof NexusGenAbstractResolveSourceTypes
  ? NexusGenAbstractResolveSourceTypes[TypeName]
  : never;
type RootType<TypeName> = TypeName extends keyof NexusGenRootTypes
  ? NexusGenRootTypes[TypeName]
  : never;
type ArgType<TypeName, FieldName> = TypeName extends keyof NexusGenArgTypes
  ? FieldName extends keyof NexusGenArgTypes[TypeName]
    ? NexusGenArgTypes[TypeName][FieldName]
    : {}
  : {};

export type NexusResolver<
  TypeName extends keyof NexusGenReturnTypes,
  FieldName extends keyof NexusGenReturnTypes[TypeName]
> = (
  root: RootType<TypeName>,
  args: ArgType<TypeName, FieldName>,
  context: NexusGenTypes["context"],
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenReturnTypes[TypeName][FieldName]>;

export type NexusAbstractTypeResolver<
  TypeName extends keyof NexusGenAbstractResolveReturnTypes
> = (
  root: SourceType<TypeName>,
  context: NexusGenTypes["context"],
  info: GraphQLResolveInfo
) => MaybePromise<NexusGenAbstractResolveReturnTypes[TypeName]>;
