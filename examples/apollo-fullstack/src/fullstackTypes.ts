/**
 * This file is automatically generated. Do not make changes directly.
 * 
 * By default this will regenerate when the server is started 
 * and NODE_ENV !== "production".
 * 
 * Mostly for internal use by GraphQLiteral unless otherwise 
 * documented / subject to change.
 * 
 * If you want more configurable types to use elsewhere, look into one of:
 *
 * https://github.com/dotansimha/graphql-code-generator
 * https://github.com/prisma/graphqlgen
 * https://github.com/apollographql/apollo-tooling
 */
import * as t from "./typeDefs"

// Maybe Promise
type MP<T> = T | PromiseLike<T>;

// Maybe Promise List
type MPL<T> = MP<T>[];

// Maybe Thunk
type MT<T> = T | (() => T);

// Maybe Thunk, with args
type MTA<T, A> = T | ((args?: A) => T);

export type QueryLaunchReturnType = MP<LaunchReturnType>;

export interface QueryLaunchArgs {
  count?: number;
  id: string;
}

export type QueryLaunchesReturnType = MP<LaunchConnectionReturnType>;

export interface QueryLaunchesArgs {
  after?: string;
  pageSize?: number;
}

export type QueryMeReturnType = MP<null | UserReturnType>;

export type QueryRootType = {};

export type QueryReturnType = {};

export type LaunchIdReturnType = MP<string>;

export type LaunchIsBookedReturnType = MP<boolean>;

export type LaunchMissionReturnType = MP<MissionReturnType>;

export type LaunchRocketReturnType = MP<RocketReturnType>;

export type LaunchSiteReturnType = MP<null | string>;

export type LaunchRootType = t.Launch;

export type LaunchReturnType = t.Launch

export type MissionMissionPatchReturnType = MP<string>;

export interface MissionMissionPatchArgs {
  size?: PatchSize;
}

export type MissionNameReturnType = MP<null | string>;

export type MissionRootType = t.Mission;

export type MissionReturnType = t.Mission

export type PatchSize = "LARGE" | "SMALL";

export type RocketIdReturnType = MP<string>;

export type RocketNameReturnType = MP<null | string>;

export type RocketTypeReturnType = MP<null | string>;

export interface RocketRootType {
  id: string;
  name?: null | string;
  type?: null | string;
}

export type RocketReturnType = {
  id: MT<MP<string>>;
  name?: MT<MP<null | string>>;
  type?: MT<MP<null | string>>;
}

export type LaunchConnectionCursorReturnType = MP<null | string>;

export type LaunchConnectionHasMoreReturnType = MP<boolean>;

export type LaunchConnectionLaunchesReturnType = MP<MPL<MP<null | LaunchReturnType>>>;

export interface LaunchConnectionRootType {
  cursor?: null | string;
  hasMore: boolean;
  launches: Array<null | any>;
}

export type LaunchConnectionReturnType = {
  cursor?: MT<MP<null | string>>;
  hasMore: MT<MP<boolean>>;
  launches: MT<MP<Array<null | any>>>;
}

export type UserEmailReturnType = MP<string>;

export type UserIdReturnType = MP<string>;

export type UserTripsReturnType = MP<MPL<MP<LaunchReturnType>>>;

export type UserRootType = t.DBUser;

export type UserReturnType = t.DBUser

export type MutationBookTripsReturnType = MP<TripUpdateResponseReturnType>;

export interface MutationBookTripsArgs {
  launchIds: string[];
}

export type MutationCancelTripReturnType = MP<TripUpdateResponseReturnType>;

export interface MutationCancelTripArgs {
  launchId: string;
}

export type MutationLoginReturnType = MP<null | string>;

export interface MutationLoginArgs {
  email?: string;
}

export type MutationRootType = {};

export type MutationReturnType = {};

export type TripUpdateResponseLaunchesReturnType = MP<null | LaunchReturnType>;

export type TripUpdateResponseMessageReturnType = MP<null | string>;

export type TripUpdateResponseSuccessReturnType = MP<boolean>;

export interface TripUpdateResponseRootType {
  launches?: null | any;
  message?: null | string;
  success: boolean;
}

export type TripUpdateResponseReturnType = {
  launches?: MT<MP<null | any>>;
  message?: MT<MP<null | string>>;
  success: MT<MP<boolean>>;
}

export interface GraphQLiteralGenArgTypes {
  Query: {
    launch: QueryLaunchArgs;
    launches: QueryLaunchesArgs;
  };
  Mission: {
    missionPatch: MissionMissionPatchArgs;
  };
  Mutation: {
    bookTrips: MutationBookTripsArgs;
    cancelTrip: MutationCancelTripArgs;
    login: MutationLoginArgs;
  };
}

export interface GraphQLiteralGenRootTypes {
  Query: QueryRootType;
  Launch: LaunchRootType;
  Mission: MissionRootType;
  Rocket: RocketRootType;
  LaunchConnection: LaunchConnectionRootType;
  User: UserRootType;
  Mutation: MutationRootType;
  TripUpdateResponse: TripUpdateResponseRootType;
}

export interface GraphQLiteralGenReturnTypes {
  Query: {
    launch: QueryLaunchReturnType;
    launches: QueryLaunchesReturnType;
    me: QueryMeReturnType;
  };
  Launch: {
    id: LaunchIdReturnType;
    isBooked: LaunchIsBookedReturnType;
    mission: LaunchMissionReturnType;
    rocket: LaunchRocketReturnType;
    site: LaunchSiteReturnType;
  };
  Mission: {
    missionPatch: MissionMissionPatchReturnType;
    name: MissionNameReturnType;
  };
  Rocket: {
    id: RocketIdReturnType;
    name: RocketNameReturnType;
    type: RocketTypeReturnType;
  };
  LaunchConnection: {
    cursor: LaunchConnectionCursorReturnType;
    hasMore: LaunchConnectionHasMoreReturnType;
    launches: LaunchConnectionLaunchesReturnType;
  };
  User: {
    email: UserEmailReturnType;
    id: UserIdReturnType;
    trips: UserTripsReturnType;
  };
  Mutation: {
    bookTrips: MutationBookTripsReturnType;
    cancelTrip: MutationCancelTripReturnType;
    login: MutationLoginReturnType;
  };
  TripUpdateResponse: {
    launches: TripUpdateResponseLaunchesReturnType;
    message: TripUpdateResponseMessageReturnType;
    success: TripUpdateResponseSuccessReturnType;
  };
}

export interface GraphQLiteralGenTypes {
  argTypes: GraphQLiteralGenArgTypes;
  rootTypes: GraphQLiteralGenRootTypes;
  returnTypes: GraphQLiteralGenReturnTypes;
  context: t.Context;
  enums: {
    PatchSize: PatchSize;
  };
  objects: {
    Query: QueryRootType;
    Launch: LaunchRootType;
    Mission: MissionRootType;
    Rocket: RocketRootType;
    LaunchConnection: LaunchConnectionRootType;
    User: UserRootType;
    Mutation: MutationRootType;
    TripUpdateResponse: TripUpdateResponseRootType;
  };
  interfaces: {};
  unions: {};
  scalars: {
    Int: any;
    ID: any;
    Boolean: any;
    String: any;
  };
  inputObjects: {};
  allInputTypes: 
    | Extract<keyof GraphQLiteralGenTypes['inputObjects'], string>
    | Extract<keyof GraphQLiteralGenTypes['enums'], string>
    | Extract<keyof GraphQLiteralGenTypes['scalars'], string>;
  allOutputTypes: 
    | Extract<keyof GraphQLiteralGenTypes['objects'], string>
    | Extract<keyof GraphQLiteralGenTypes['enums'], string>
    | Extract<keyof GraphQLiteralGenTypes['unions'], string>
    | Extract<keyof GraphQLiteralGenTypes['interfaces'], string>
    | Extract<keyof GraphQLiteralGenTypes['scalars'], string>;
}

export type Gen = GraphQLiteralGenTypes;

declare global {
  interface GraphQLiteralGen extends GraphQLiteralGenTypes {}
}
